// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery gRPC client CLI support package
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package cli

import (
	"flag"
	"fmt"
	"os"

	userqueryc "gitlab.com/wiserskills/v3/services/userquery/gen/grpc/userquery/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `userquery (sign-in|sign-out|get-all-sessions|get-idpurl|check-token|get-users-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` userquery sign-in --message '{
      "areaId": "PROD",
      "orgId": "WiserSKILLS"
   }' --username "user" --password "password" --key "abcdef12345"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		userqueryFlags = flag.NewFlagSet("userquery", flag.ContinueOnError)

		userquerySignInFlags        = flag.NewFlagSet("sign-in", flag.ExitOnError)
		userquerySignInMessageFlag  = userquerySignInFlags.String("message", "", "")
		userquerySignInUsernameFlag = userquerySignInFlags.String("username", "REQUIRED", "")
		userquerySignInPasswordFlag = userquerySignInFlags.String("password", "REQUIRED", "")
		userquerySignInKeyFlag      = userquerySignInFlags.String("key", "", "")

		userquerySignOutFlags       = flag.NewFlagSet("sign-out", flag.ExitOnError)
		userquerySignOutMessageFlag = userquerySignOutFlags.String("message", "", "")
		userquerySignOutTokenFlag   = userquerySignOutFlags.String("token", "REQUIRED", "")
		userquerySignOutKeyFlag     = userquerySignOutFlags.String("key", "REQUIRED", "")

		userqueryGetAllSessionsFlags       = flag.NewFlagSet("get-all-sessions", flag.ExitOnError)
		userqueryGetAllSessionsMessageFlag = userqueryGetAllSessionsFlags.String("message", "", "")
		userqueryGetAllSessionsTokenFlag   = userqueryGetAllSessionsFlags.String("token", "REQUIRED", "")
		userqueryGetAllSessionsKeyFlag     = userqueryGetAllSessionsFlags.String("key", "REQUIRED", "")

		userqueryGetIDPURLFlags       = flag.NewFlagSet("get-idpurl", flag.ExitOnError)
		userqueryGetIDPURLMessageFlag = userqueryGetIDPURLFlags.String("message", "", "")
		userqueryGetIDPURLKeyFlag     = userqueryGetIDPURLFlags.String("key", "REQUIRED", "")

		userqueryCheckTokenFlags       = flag.NewFlagSet("check-token", flag.ExitOnError)
		userqueryCheckTokenMessageFlag = userqueryCheckTokenFlags.String("message", "", "")
		userqueryCheckTokenTokenFlag   = userqueryCheckTokenFlags.String("token", "REQUIRED", "")
		userqueryCheckTokenKeyFlag     = userqueryCheckTokenFlags.String("key", "REQUIRED", "")

		userqueryGetUsersByIDFlags       = flag.NewFlagSet("get-users-by-id", flag.ExitOnError)
		userqueryGetUsersByIDMessageFlag = userqueryGetUsersByIDFlags.String("message", "", "")
		userqueryGetUsersByIDTokenFlag   = userqueryGetUsersByIDFlags.String("token", "REQUIRED", "")
		userqueryGetUsersByIDKeyFlag     = userqueryGetUsersByIDFlags.String("key", "REQUIRED", "")
	)
	userqueryFlags.Usage = userqueryUsage
	userquerySignInFlags.Usage = userquerySignInUsage
	userquerySignOutFlags.Usage = userquerySignOutUsage
	userqueryGetAllSessionsFlags.Usage = userqueryGetAllSessionsUsage
	userqueryGetIDPURLFlags.Usage = userqueryGetIDPURLUsage
	userqueryCheckTokenFlags.Usage = userqueryCheckTokenUsage
	userqueryGetUsersByIDFlags.Usage = userqueryGetUsersByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "userquery":
			svcf = userqueryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "userquery":
			switch epn {
			case "sign-in":
				epf = userquerySignInFlags

			case "sign-out":
				epf = userquerySignOutFlags

			case "get-all-sessions":
				epf = userqueryGetAllSessionsFlags

			case "get-idpurl":
				epf = userqueryGetIDPURLFlags

			case "check-token":
				epf = userqueryCheckTokenFlags

			case "get-users-by-id":
				epf = userqueryGetUsersByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "userquery":
			c := userqueryc.NewClient(cc, opts...)
			switch epn {
			case "sign-in":
				endpoint = c.SignIn()
				data, err = userqueryc.BuildSignInPayload(*userquerySignInMessageFlag, *userquerySignInUsernameFlag, *userquerySignInPasswordFlag, *userquerySignInKeyFlag)
			case "sign-out":
				endpoint = c.SignOut()
				data, err = userqueryc.BuildSignOutPayload(*userquerySignOutMessageFlag, *userquerySignOutTokenFlag, *userquerySignOutKeyFlag)
			case "get-all-sessions":
				endpoint = c.GetAllSessions()
				data, err = userqueryc.BuildGetAllSessionsPayload(*userqueryGetAllSessionsMessageFlag, *userqueryGetAllSessionsTokenFlag, *userqueryGetAllSessionsKeyFlag)
			case "get-idpurl":
				endpoint = c.GetIDPURL()
				data, err = userqueryc.BuildGetIDPURLPayload(*userqueryGetIDPURLMessageFlag, *userqueryGetIDPURLKeyFlag)
			case "check-token":
				endpoint = c.CheckToken()
				data, err = userqueryc.BuildCheckTokenPayload(*userqueryCheckTokenMessageFlag, *userqueryCheckTokenTokenFlag, *userqueryCheckTokenKeyFlag)
			case "get-users-by-id":
				endpoint = c.GetUsersByID()
				data, err = userqueryc.BuildGetUsersByIDPayload(*userqueryGetUsersByIDMessageFlag, *userqueryGetUsersByIDTokenFlag, *userqueryGetUsersByIDKeyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userqueryUsage displays the usage of the userquery command and its
// subcommands.
func userqueryUsage() {
	fmt.Fprintf(os.Stderr, `API service to authenticate users. The service requires an ArangoDB server. Data synchronization with other services is done via a shared NATS Streaming event bus.
Usage:
    %s [globalflags] userquery COMMAND [flags]

COMMAND:
    sign-in: Signs a user in.
    sign-out: Signs a user out.
    get-all-sessions: Returns the currently active sessions.
    get-idpurl: Returns the URL of the IDP to redirect the user to.
    check-token: Checks if the passed token is valid.
    get-users-by-id: Returns the users with the specified ids.

Additional help:
    %s userquery COMMAND --help
`, os.Args[0], os.Args[0])
}
func userquerySignInUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery sign-in -message JSON -username STRING -password STRING -key STRING

Signs a user in.
    -message JSON: 
    -username STRING: 
    -password STRING: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery sign-in --message '{
      "areaId": "PROD",
      "orgId": "WiserSKILLS"
   }' --username "user" --password "password" --key "abcdef12345"
`, os.Args[0])
}

func userquerySignOutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery sign-out -message JSON -token STRING -key STRING

Signs a user out.
    -message JSON: 
    -token STRING: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery sign-out --message '{
      "areaId": "ss",
      "orgId": "fka"
   }' --token "Amet aut in." --key "abcdef12345"
`, os.Args[0])
}

func userqueryGetAllSessionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-all-sessions -message JSON -token STRING -key STRING

Returns the currently active sessions.
    -message JSON: 
    -token STRING: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery get-all-sessions --message '{
      "areaId": "PROD",
      "orgId": "65e",
      "view": "tiny"
   }' --token "hpp" --key "abcdef12345"
`, os.Args[0])
}

func userqueryGetIDPURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-idpurl -message JSON -key STRING

Returns the URL of the IDP to redirect the user to.
    -message JSON: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery get-idpurl --message '{
      "areaId": "3zr",
      "host": "Voluptas eaque perferendis accusantium.",
      "orgId": "jzo"
   }' --key "abcdef12345"
`, os.Args[0])
}

func userqueryCheckTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery check-token -message JSON -token STRING -key STRING

Checks if the passed token is valid.
    -message JSON: 
    -token STRING: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery check-token --message '{
      "areaId": "ad",
      "orgId": "gaz"
   }' --token "Velit eius minus praesentium expedita." --key "abcdef12345"
`, os.Args[0])
}

func userqueryGetUsersByIDUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-users-by-id -message JSON -token STRING -key STRING

Returns the users with the specified ids.
    -message JSON: 
    -token STRING: 
    -key STRING: 

Example:
    `+os.Args[0]+` userquery get-users-by-id --message '{
      "activeOnly": true,
      "areaId": "8w8",
      "ids": [
         "Ab modi magni saepe quia.",
         "Ratione voluptatem accusamus atque nostrum.",
         "Quae velit aliquam fugiat et ipsa."
      ],
      "orgId": "bu3",
      "view": "Adipisci rerum adipisci."
   }' --token "Ducimus aliquid." --key "abcdef12345"
`, os.Args[0])
}
