// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery gRPC server
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package server

import (
	"context"
	"gitlab.com/wiserskills/v3/services/userquery/gen/constants"
	userquerypb "gitlab.com/wiserskills/v3/services/userquery/gen/grpc/userquery/pb"
	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the userquerypb.UserqueryServer interface.
type Server struct {
	SignInH         goagrpc.UnaryHandler
	SignOutH        goagrpc.UnaryHandler
	GetAllSessionsH goagrpc.UnaryHandler
	GetIDPURLH      goagrpc.UnaryHandler
	CheckTokenH     goagrpc.UnaryHandler
	GetUsersByIDH   goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the userquery service endpoints.
func New(e *userquery.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SignInH:         NewSignInHandler(e.SignIn, uh),
		SignOutH:        NewSignOutHandler(e.SignOut, uh),
		GetAllSessionsH: NewGetAllSessionsHandler(e.GetAllSessions, uh),
		GetIDPURLH:      NewGetIDPURLHandler(e.GetIDPURL, uh),
		CheckTokenH:     NewCheckTokenHandler(e.CheckToken, uh),
		GetUsersByIDH:   NewGetUsersByIDHandler(e.GetUsersByID, uh),
	}
}

// NewSignInHandler creates a gRPC handler which serves the "userquery" service
// "SignIn" endpoint.
func NewSignInHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSignInRequest, EncodeSignInResponse)
	}
	return h
}

// SignIn implements the "SignIn" method in userquerypb.UserqueryServer
// interface.
func (s *Server) SignIn(ctx context.Context, message *userquerypb.SignInRequest) (*userquerypb.SignInResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "SignIn")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	ctx = context.WithValue(ctx, constants.ContextKeyOrgID , message.OrgId)
	ctx = context.WithValue(ctx, constants.ContextKeyAreaID, message.AreaId)
	resp, err := s.SignInH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "not_authorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "invalid_credentials":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "password_expired":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "login_blocked":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.SignInResponse), nil
}

// NewSignOutHandler creates a gRPC handler which serves the "userquery"
// service "SignOut" endpoint.
func NewSignOutHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSignOutRequest, EncodeSignOutResponse)
	}
	return h
}

// SignOut implements the "SignOut" method in userquerypb.UserqueryServer
// interface.
func (s *Server) SignOut(ctx context.Context, message *userquerypb.SignOutRequest) (*userquerypb.SignOutResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "SignOut")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	resp, err := s.SignOutH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "token_expired":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "token_invalid":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			case "not_authorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.SignOutResponse), nil
}

// NewGetAllSessionsHandler creates a gRPC handler which serves the "userquery"
// service "GetAllSessions" endpoint.
func NewGetAllSessionsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetAllSessionsRequest, EncodeGetAllSessionsResponse)
	}
	return h
}

// GetAllSessions implements the "GetAllSessions" method in
// userquerypb.UserqueryServer interface.
func (s *Server) GetAllSessions(ctx context.Context, message *userquerypb.GetAllSessionsRequest) (*userquerypb.SessionCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetAllSessions")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	resp, err := s.GetAllSessionsH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "token_expired":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "token_invalid":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.SessionCollection), nil
}

// NewGetIDPURLHandler creates a gRPC handler which serves the "userquery"
// service "GetIDPURL" endpoint.
func NewGetIDPURLHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetIDPURLRequest, EncodeGetIDPURLResponse)
	}
	return h
}

// GetIDPURL implements the "GetIDPURL" method in userquerypb.UserqueryServer
// interface.
func (s *Server) GetIDPURL(ctx context.Context, message *userquerypb.GetIDPURLRequest) (*userquerypb.GetIDPURLResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetIDPURL")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	resp, err := s.GetIDPURLH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.GetIDPURLResponse), nil
}

// NewCheckTokenHandler creates a gRPC handler which serves the "userquery"
// service "CheckToken" endpoint.
func NewCheckTokenHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCheckTokenRequest, EncodeCheckTokenResponse)
	}
	return h
}

// CheckToken implements the "CheckToken" method in userquerypb.UserqueryServer
// interface.
func (s *Server) CheckToken(ctx context.Context, message *userquerypb.CheckTokenRequest) (*userquerypb.CheckTokenResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CheckToken")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	resp, err := s.CheckTokenH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "token_expired":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "token_invalid":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			case "not_authorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.CheckTokenResponse), nil
}

// NewGetUsersByIDHandler creates a gRPC handler which serves the "userquery"
// service "GetUsersByID" endpoint.
func NewGetUsersByIDHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetUsersByIDRequest, EncodeGetUsersByIDResponse)
	}
	return h
}

// GetUsersByID implements the "GetUsersByID" method in
// userquerypb.UserqueryServer interface.
func (s *Server) GetUsersByID(ctx context.Context, message *userquerypb.GetUsersByIDRequest) (*userquerypb.RegisteredUserCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetUsersByID")
	ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
	resp, err := s.GetUsersByIDH.Handle(ctx, message)
	if err != nil {
		if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "token_expired":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "token_invalid":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "bad_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "unexpected_error":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			case "not_authorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*userquerypb.RegisteredUserCollection), nil
}
