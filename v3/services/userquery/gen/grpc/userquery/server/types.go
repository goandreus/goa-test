// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery gRPC server types
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package server

import (
	"unicode/utf8"

	userquerypb "gitlab.com/wiserskills/v3/services/userquery/gen/grpc/userquery/pb"
	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	userqueryviews "gitlab.com/wiserskills/v3/services/userquery/gen/userquery/views"
	goa "goa.design/goa/v3/pkg"
)

// NewSignInPayload builds the payload of the "SignIn" endpoint of the
// "userquery" service from the gRPC request type.
func NewSignInPayload(message *userquerypb.SignInRequest, username string, password string, key *string) *userquery.SignInPayload {
	v := &userquery.SignInPayload{
		OrgID:  message.OrgId,
		AreaID: message.AreaId,
	}
	v.Username = username
	v.Password = password
	v.Key = key
	return v
}

// NewSignInResponse builds the gRPC response type from the result of the
// "SignIn" endpoint of the "userquery" service.
func NewSignInResponse(result *userquery.JWTToken) *userquerypb.SignInResponse {
	message := &userquerypb.SignInResponse{
		Token: result.Token,
	}
	return message
}

// NewSignOutPayload builds the payload of the "SignOut" endpoint of the
// "userquery" service from the gRPC request type.
func NewSignOutPayload(message *userquerypb.SignOutRequest, token string, key string) *userquery.TokenPayload {
	v := &userquery.TokenPayload{
		OrgID:  message.OrgId,
		AreaID: message.AreaId,
	}
	v.Token = token
	v.Key = key
	return v
}

// NewSignOutResponse builds the gRPC response type from the result of the
// "SignOut" endpoint of the "userquery" service.
func NewSignOutResponse() *userquerypb.SignOutResponse {
	message := &userquerypb.SignOutResponse{}
	return message
}

// NewGetAllSessionsPayload builds the payload of the "GetAllSessions" endpoint
// of the "userquery" service from the gRPC request type.
func NewGetAllSessionsPayload(message *userquerypb.GetAllSessionsRequest, token string, key string) *userquery.AllSessionsPayload {
	v := &userquery.AllSessionsPayload{
		OrgID:  message.OrgId,
		AreaID: message.AreaId,
	}
	if message.View != "" {
		v.View = &message.View
	}
	v.Token = token
	v.Key = key
	return v
}

// NewSessionCollection builds the gRPC response type from the result of the
// "GetAllSessions" endpoint of the "userquery" service.
func NewSessionCollection(result userqueryviews.SessionCollectionView) *userquerypb.SessionCollection {
	message := &userquerypb.SessionCollection{}
	message.Field = make([]*userquerypb.Session, len(result))
	for i, val := range result {
		message.Field[i] = &userquerypb.Session{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.Key != nil {
			message.Field[i].Key = *val.Key
		}
		if val.OrganizationID != nil {
			message.Field[i].OrganizationId = *val.OrganizationID
		}
		if val.AreaID != nil {
			message.Field[i].AreaId = *val.AreaID
		}
		if val.UserID != nil {
			message.Field[i].UserId = *val.UserID
		}
		if val.TokenID != nil {
			message.Field[i].TokenId = *val.TokenID
		}
		if val.CreatedAt != nil {
			message.Field[i].CreatedAt = *val.CreatedAt
		}
		if val.UpdatedAt != nil {
			message.Field[i].UpdatedAt = *val.UpdatedAt
		}
		if val.ExpiresAt != nil {
			message.Field[i].ExpiresAt = *val.ExpiresAt
		}
	}
	return message
}

// NewGetIDPURLPayload builds the payload of the "GetIDPURL" endpoint of the
// "userquery" service from the gRPC request type.
func NewGetIDPURLPayload(message *userquerypb.GetIDPURLRequest, key string) *userquery.HostPayload {
	v := &userquery.HostPayload{
		Host:   message.Host,
		OrgID:  message.OrgId,
		AreaID: message.AreaId,
	}
	v.Key = key
	return v
}

// NewGetIDPURLResponse builds the gRPC response type from the result of the
// "GetIDPURL" endpoint of the "userquery" service.
func NewGetIDPURLResponse(result *userquery.RedirectResult) *userquerypb.GetIDPURLResponse {
	message := &userquerypb.GetIDPURLResponse{
		Location: result.Location,
	}
	return message
}

// NewCheckTokenPayload builds the payload of the "CheckToken" endpoint of the
// "userquery" service from the gRPC request type.
func NewCheckTokenPayload(message *userquerypb.CheckTokenRequest, token string, key string) *userquery.TokenPayload {
	v := &userquery.TokenPayload{
		OrgID:  message.OrgId,
		AreaID: message.AreaId,
	}
	v.Token = token
	v.Key = key
	return v
}

// NewCheckTokenResponse builds the gRPC response type from the result of the
// "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenResponse() *userquerypb.CheckTokenResponse {
	message := &userquerypb.CheckTokenResponse{}
	return message
}

// NewGetUsersByIDPayload builds the payload of the "GetUsersByID" endpoint of
// the "userquery" service from the gRPC request type.
func NewGetUsersByIDPayload(message *userquerypb.GetUsersByIDRequest, token string, key string) *userquery.ManyUserIDPayload {
	v := &userquery.ManyUserIDPayload{
		OrgID:      message.OrgId,
		AreaID:     message.AreaId,
		View:       message.View,
		ActiveOnly: message.ActiveOnly,
	}
	if message.Ids != nil {
		v.Ids = make([]string, len(message.Ids))
		for i, val := range message.Ids {
			v.Ids[i] = val
		}
	}
	if message.View == "" {
		v.View = "default"
	}
	v.Token = token
	v.Key = key
	return v
}

// NewRegisteredUserCollection builds the gRPC response type from the result of
// the "GetUsersByID" endpoint of the "userquery" service.
func NewRegisteredUserCollection(result userqueryviews.RegisteredUserCollectionView) *userquerypb.RegisteredUserCollection {
	message := &userquerypb.RegisteredUserCollection{}
	message.Field = make([]*userquerypb.RegisteredUser, len(result))
	for i, val := range result {
		message.Field[i] = &userquerypb.RegisteredUser{}
		if val.ID != nil {
			message.Field[i].Id = *val.ID
		}
		if val.FirstName != nil {
			message.Field[i].FirstName = *val.FirstName
		}
		if val.LastName != nil {
			message.Field[i].LastName = *val.LastName
		}
		if val.Active != nil {
			message.Field[i].Active = *val.Active
		}
		if val.BirthName != nil {
			message.Field[i].BirthName = *val.BirthName
		}
		if val.Address != nil {
			message.Field[i].Address = *val.Address
		}
		if val.CityID != nil {
			message.Field[i].CityId = *val.CityID
		}
		if val.CountryID != nil {
			message.Field[i].CountryId = *val.CountryID
		}
		if val.Latitude != nil {
			message.Field[i].Latitude = *val.Latitude
		}
		if val.Longitude != nil {
			message.Field[i].Longitude = *val.Longitude
		}
		if val.BirthDate != nil {
			message.Field[i].BirthDate = *val.BirthDate
		}
		if val.Gender != nil {
			message.Field[i].Gender = *val.Gender
		}
		if val.LanguageID != nil {
			message.Field[i].LanguageId = *val.LanguageID
		}
		if val.Email != nil {
			message.Field[i].Email = *val.Email
		}
		if val.Login != nil {
			message.Field[i].Login = *val.Login
		}
		if val.Mobile != nil {
			message.Field[i].Mobile = *val.Mobile
		}
		if val.B2C != nil {
			message.Field[i].B2C = *val.B2C
		}
		if val.CreatedAt != nil {
			message.Field[i].CreatedAt = *val.CreatedAt
		}
		if val.UpdatedAt != nil {
			message.Field[i].UpdatedAt = *val.UpdatedAt
		}
		if val.OrganizationID != nil {
			message.Field[i].OrganizationId = *val.OrganizationID
		}
		if val.Active == nil {
			message.Field[i].Active = true
		}
		if val.B2C == nil {
			message.Field[i].B2C = false
		}
		if val.Roles != nil {
			message.Field[i].Roles = make([]string, len(val.Roles))
			for j, val := range val.Roles {
				message.Field[i].Roles[j] = val
			}
		}
	}
	return message
}

// ValidateSignInRequest runs the validations defined on SignInRequest.
func ValidateSignInRequest(message *userquerypb.SignInRequest) (err error) {
	if !(message.AreaId == "PROD" || message.AreaId == "UAT" || message.AreaId == "QA" || message.AreaId == "DEV") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "UAT", "QA", "DEV"}))
	}
	return
}

// ValidateSignOutRequest runs the validations defined on SignOutRequest.
func ValidateSignOutRequest(message *userquerypb.SignOutRequest) (err error) {
	if utf8.RuneCountInString(message.OrgId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.orgId", message.OrgId, utf8.RuneCountInString(message.OrgId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(message.AreaId) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 2, true))
	}
	if utf8.RuneCountInString(message.AreaId) > 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 4, false))
	}
	return
}

// ValidateGetAllSessionsRequest runs the validations defined on
// GetAllSessionsRequest.
func ValidateGetAllSessionsRequest(message *userquerypb.GetAllSessionsRequest) (err error) {
	if utf8.RuneCountInString(message.OrgId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.orgId", message.OrgId, utf8.RuneCountInString(message.OrgId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if message.View != "" {
		if !(message.View == "default" || message.View == "tiny") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.view", message.View, []interface{}{"default", "tiny"}))
		}
	}
	return
}

// ValidateGetIDPURLRequest runs the validations defined on GetIDPURLRequest.
func ValidateGetIDPURLRequest(message *userquerypb.GetIDPURLRequest) (err error) {
	if utf8.RuneCountInString(message.OrgId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.orgId", message.OrgId, utf8.RuneCountInString(message.OrgId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(message.AreaId) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 20, false))
	}
	return
}

// ValidateCheckTokenRequest runs the validations defined on CheckTokenRequest.
func ValidateCheckTokenRequest(message *userquerypb.CheckTokenRequest) (err error) {
	if utf8.RuneCountInString(message.OrgId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.orgId", message.OrgId, utf8.RuneCountInString(message.OrgId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(message.AreaId) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 2, true))
	}
	if utf8.RuneCountInString(message.AreaId) > 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 4, false))
	}
	return
}

// ValidateGetUsersByIDRequest runs the validations defined on
// GetUsersByIDRequest.
func ValidateGetUsersByIDRequest(message *userquerypb.GetUsersByIDRequest) (err error) {
	if message.Ids == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ids", "message"))
	}
	if utf8.RuneCountInString(message.OrgId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.orgId", message.OrgId, utf8.RuneCountInString(message.OrgId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(message.AreaId) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 20, false))
	}
	return
}
