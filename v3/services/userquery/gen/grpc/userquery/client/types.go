// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery gRPC client types
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package client

import (
	"unicode/utf8"

	userquerypb "gitlab.com/wiserskills/v3/services/userquery/gen/grpc/userquery/pb"
	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	userqueryviews "gitlab.com/wiserskills/v3/services/userquery/gen/userquery/views"
	goa "goa.design/goa/v3/pkg"
)

// NewSignInRequest builds the gRPC request type from the payload of the
// "SignIn" endpoint of the "userquery" service.
func NewSignInRequest(payload *userquery.SignInPayload) *userquerypb.SignInRequest {
	message := &userquerypb.SignInRequest{
		OrgId:  payload.OrgID,
		AreaId: payload.AreaID,
	}
	return message
}

// NewSignInResult builds the result type of the "SignIn" endpoint of the
// "userquery" service from the gRPC response type.
func NewSignInResult(message *userquerypb.SignInResponse) *userquery.JWTToken {
	result := &userquery.JWTToken{
		Token: message.Token,
	}
	return result
}

// NewSignOutRequest builds the gRPC request type from the payload of the
// "SignOut" endpoint of the "userquery" service.
func NewSignOutRequest(payload *userquery.TokenPayload) *userquerypb.SignOutRequest {
	message := &userquerypb.SignOutRequest{
		OrgId:  payload.OrgID,
		AreaId: payload.AreaID,
	}
	return message
}

// NewGetAllSessionsRequest builds the gRPC request type from the payload of
// the "GetAllSessions" endpoint of the "userquery" service.
func NewGetAllSessionsRequest(payload *userquery.AllSessionsPayload) *userquerypb.GetAllSessionsRequest {
	message := &userquerypb.GetAllSessionsRequest{
		OrgId:  payload.OrgID,
		AreaId: payload.AreaID,
	}
	if payload.View != nil {
		message.View = *payload.View
	}
	return message
}

// NewGetAllSessionsResult builds the result type of the "GetAllSessions"
// endpoint of the "userquery" service from the gRPC response type.
func NewGetAllSessionsResult(message *userquerypb.SessionCollection) userqueryviews.SessionCollectionView {
	result := make([]*userqueryviews.SessionView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &userqueryviews.SessionView{
			ID:             &val.Id,
			OrganizationID: &val.OrganizationId,
			AreaID:         &val.AreaId,
			UserID:         &val.UserId,
			TokenID:        &val.TokenId,
		}
		if val.Key != "" {
			result[i].Key = &val.Key
		}
		if val.CreatedAt != "" {
			result[i].CreatedAt = &val.CreatedAt
		}
		if val.UpdatedAt != "" {
			result[i].UpdatedAt = &val.UpdatedAt
		}
		if val.ExpiresAt != "" {
			result[i].ExpiresAt = &val.ExpiresAt
		}
	}
	return result
}

// NewGetIDPURLRequest builds the gRPC request type from the payload of the
// "GetIDPURL" endpoint of the "userquery" service.
func NewGetIDPURLRequest(payload *userquery.HostPayload) *userquerypb.GetIDPURLRequest {
	message := &userquerypb.GetIDPURLRequest{
		Host:   payload.Host,
		OrgId:  payload.OrgID,
		AreaId: payload.AreaID,
	}
	return message
}

// NewGetIDPURLResult builds the result type of the "GetIDPURL" endpoint of the
// "userquery" service from the gRPC response type.
func NewGetIDPURLResult(message *userquerypb.GetIDPURLResponse) *userquery.RedirectResult {
	result := &userquery.RedirectResult{
		Location: message.Location,
	}
	return result
}

// NewCheckTokenRequest builds the gRPC request type from the payload of the
// "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenRequest(payload *userquery.TokenPayload) *userquerypb.CheckTokenRequest {
	message := &userquerypb.CheckTokenRequest{
		OrgId:  payload.OrgID,
		AreaId: payload.AreaID,
	}
	return message
}

// NewGetUsersByIDRequest builds the gRPC request type from the payload of the
// "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDRequest(payload *userquery.ManyUserIDPayload) *userquerypb.GetUsersByIDRequest {
	message := &userquerypb.GetUsersByIDRequest{
		OrgId:      payload.OrgID,
		AreaId:     payload.AreaID,
		View:       payload.View,
		ActiveOnly: payload.ActiveOnly,
	}
	if payload.Ids != nil {
		message.Ids = make([]string, len(payload.Ids))
		for i, val := range payload.Ids {
			message.Ids[i] = val
		}
	}
	return message
}

// NewGetUsersByIDResult builds the result type of the "GetUsersByID" endpoint
// of the "userquery" service from the gRPC response type.
func NewGetUsersByIDResult(message *userquerypb.RegisteredUserCollection) userqueryviews.RegisteredUserCollectionView {
	result := make([]*userqueryviews.RegisteredUserView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &userqueryviews.RegisteredUserView{
			ID:             &val.Id,
			FirstName:      &val.FirstName,
			LastName:       &val.LastName,
			Active:         &val.Active,
			BirthName:      &val.BirthName,
			Email:          &val.Email,
			Login:          &val.Login,
			B2C:            &val.B2C,
			OrganizationID: &val.OrganizationId,
		}
		if val.Address != "" {
			result[i].Address = &val.Address
		}
		if val.CityId != "" {
			result[i].CityID = &val.CityId
		}
		if val.CountryId != "" {
			result[i].CountryID = &val.CountryId
		}
		if val.Latitude != 0 {
			result[i].Latitude = &val.Latitude
		}
		if val.Longitude != 0 {
			result[i].Longitude = &val.Longitude
		}
		if val.BirthDate != "" {
			result[i].BirthDate = &val.BirthDate
		}
		if val.Gender != "" {
			result[i].Gender = &val.Gender
		}
		if val.LanguageId != "" {
			result[i].LanguageID = &val.LanguageId
		}
		if val.Mobile != "" {
			result[i].Mobile = &val.Mobile
		}
		if val.CreatedAt != "" {
			result[i].CreatedAt = &val.CreatedAt
		}
		if val.UpdatedAt != "" {
			result[i].UpdatedAt = &val.UpdatedAt
		}
		if val.Roles != nil {
			result[i].Roles = make([]string, len(val.Roles))
			for j, val := range val.Roles {
				result[i].Roles[j] = val
			}
		}
	}
	return result
}

// ValidateSessionCollection runs the validations defined on SessionCollection.
func ValidateSessionCollection(message *userquerypb.SessionCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateSession(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSession runs the validations defined on Session.
func ValidateSession(message *userquerypb.Session) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.key", message.Key, goa.FormatUUID))

	if utf8.RuneCountInString(message.OrganizationId) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.organizationId", message.OrganizationId, utf8.RuneCountInString(message.OrganizationId), 255, false))
	}
	if !(message.AreaId == "PROD" || message.AreaId == "DEV" || message.AreaId == "QA" || message.AreaId == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.areaId", message.AreaId, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(message.AreaId) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 2, true))
	}
	if utf8.RuneCountInString(message.AreaId) > 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.areaId", message.AreaId, utf8.RuneCountInString(message.AreaId), 4, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.userId", message.UserId, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.tokenId", message.TokenId, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.expiresAt", message.ExpiresAt, goa.FormatDateTime))

	return
}

// ValidateRegisteredUserCollection runs the validations defined on
// RegisteredUserCollection.
func ValidateRegisteredUserCollection(message *userquerypb.RegisteredUserCollection) (err error) {
	for _, e := range message.Field {
		if e != nil {
			if err2 := ValidateRegisteredUser(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRegisteredUser runs the validations defined on RegisteredUser.
func ValidateRegisteredUser(message *userquerypb.RegisteredUser) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.id", message.Id, goa.FormatUUID))

	if utf8.RuneCountInString(message.FirstName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.firstName", message.FirstName, utf8.RuneCountInString(message.FirstName), 255, false))
	}
	if utf8.RuneCountInString(message.LastName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.lastName", message.LastName, utf8.RuneCountInString(message.LastName), 255, false))
	}
	if utf8.RuneCountInString(message.BirthName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.birthName", message.BirthName, utf8.RuneCountInString(message.BirthName), 255, false))
	}
	if utf8.RuneCountInString(message.Address) > 1024 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.address", message.Address, utf8.RuneCountInString(message.Address), 1024, false))
	}
	if utf8.RuneCountInString(message.CountryId) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.countryId", message.CountryId, utf8.RuneCountInString(message.CountryId), 2, true))
	}
	if utf8.RuneCountInString(message.CountryId) > 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.countryId", message.CountryId, utf8.RuneCountInString(message.CountryId), 2, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.birthDate", message.BirthDate, goa.FormatDate))

	if !(message.Gender == "M" || message.Gender == "F") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.gender", message.Gender, []interface{}{"M", "F"}))
	}
	if utf8.RuneCountInString(message.Gender) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.gender", message.Gender, utf8.RuneCountInString(message.Gender), 1, true))
	}
	if utf8.RuneCountInString(message.Gender) > 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.gender", message.Gender, utf8.RuneCountInString(message.Gender), 1, false))
	}
	if utf8.RuneCountInString(message.LanguageId) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.languageId", message.LanguageId, utf8.RuneCountInString(message.LanguageId), 2, true))
	}
	if utf8.RuneCountInString(message.LanguageId) > 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.languageId", message.LanguageId, utf8.RuneCountInString(message.LanguageId), 2, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.email", message.Email, goa.FormatEmail))

	if utf8.RuneCountInString(message.Email) > 512 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.email", message.Email, utf8.RuneCountInString(message.Email), 512, false))
	}
	if utf8.RuneCountInString(message.Login) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.login", message.Login, utf8.RuneCountInString(message.Login), 255, false))
	}
	if utf8.RuneCountInString(message.Mobile) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.mobile", message.Mobile, utf8.RuneCountInString(message.Mobile), 20, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("message.createdAt", message.CreatedAt, goa.FormatDateTime))

	err = goa.MergeErrors(err, goa.ValidateFormat("message.updatedAt", message.UpdatedAt, goa.FormatDateTime))

	return
}
