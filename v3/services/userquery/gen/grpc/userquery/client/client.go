// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery gRPC client
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package client

import (
	"context"

	userquerypb "gitlab.com/wiserskills/v3/services/userquery/gen/grpc/userquery/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli userquerypb.UserqueryClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the userquery service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: userquerypb.NewUserqueryClient(cc),
		opts:    opts,
	}
}

// SignIn calls the "SignIn" function in userquerypb.UserqueryClient interface.
func (c *Client) SignIn() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildSignInFunc(c.grpccli, c.opts...),
			EncodeSignInRequest,
			DecodeSignInResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// SignOut calls the "SignOut" function in userquerypb.UserqueryClient
// interface.
func (c *Client) SignOut() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildSignOutFunc(c.grpccli, c.opts...),
			EncodeSignOutRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// GetAllSessions calls the "GetAllSessions" function in
// userquerypb.UserqueryClient interface.
func (c *Client) GetAllSessions() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetAllSessionsFunc(c.grpccli, c.opts...),
			EncodeGetAllSessionsRequest,
			DecodeGetAllSessionsResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// GetIDPURL calls the "GetIDPURL" function in userquerypb.UserqueryClient
// interface.
func (c *Client) GetIDPURL() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetIDPURLFunc(c.grpccli, c.opts...),
			EncodeGetIDPURLRequest,
			DecodeGetIDPURLResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// CheckToken calls the "CheckToken" function in userquerypb.UserqueryClient
// interface.
func (c *Client) CheckToken() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildCheckTokenFunc(c.grpccli, c.opts...),
			EncodeCheckTokenRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// GetUsersByID calls the "GetUsersByID" function in
// userquerypb.UserqueryClient interface.
func (c *Client) GetUsersByID() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetUsersByIDFunc(c.grpccli, c.opts...),
			EncodeGetUsersByIDRequest,
			DecodeGetUsersByIDResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}
