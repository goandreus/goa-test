// Code generated by protoc-gen-go. DO NOT EDIT.
// source: userquery.proto

package userquerypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignInRequest struct {
	// The id of the organization.
	OrgId string `protobuf:"bytes,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area.
	AreaId               string   `protobuf:"bytes,5,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInRequest) Reset()         { *m = SignInRequest{} }
func (m *SignInRequest) String() string { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()    {}
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{0}
}

func (m *SignInRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignInRequest.Unmarshal(m, b)
}
func (m *SignInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignInRequest.Marshal(b, m, deterministic)
}
func (m *SignInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInRequest.Merge(m, src)
}
func (m *SignInRequest) XXX_Size() int {
	return xxx_messageInfo_SignInRequest.Size(m)
}
func (m *SignInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignInRequest proto.InternalMessageInfo

func (m *SignInRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SignInRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

type SignInResponse struct {
	// JWT token
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInResponse) Reset()         { *m = SignInResponse{} }
func (m *SignInResponse) String() string { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()    {}
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{1}
}

func (m *SignInResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignInResponse.Unmarshal(m, b)
}
func (m *SignInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignInResponse.Marshal(b, m, deterministic)
}
func (m *SignInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInResponse.Merge(m, src)
}
func (m *SignInResponse) XXX_Size() int {
	return xxx_messageInfo_SignInResponse.Size(m)
}
func (m *SignInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignInResponse proto.InternalMessageInfo

func (m *SignInResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SignOutRequest struct {
	// The id of the organization
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area
	AreaId               string   `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignOutRequest) Reset()         { *m = SignOutRequest{} }
func (m *SignOutRequest) String() string { return proto.CompactTextString(m) }
func (*SignOutRequest) ProtoMessage()    {}
func (*SignOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{2}
}

func (m *SignOutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignOutRequest.Unmarshal(m, b)
}
func (m *SignOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignOutRequest.Marshal(b, m, deterministic)
}
func (m *SignOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignOutRequest.Merge(m, src)
}
func (m *SignOutRequest) XXX_Size() int {
	return xxx_messageInfo_SignOutRequest.Size(m)
}
func (m *SignOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignOutRequest proto.InternalMessageInfo

func (m *SignOutRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *SignOutRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

type SignOutResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignOutResponse) Reset()         { *m = SignOutResponse{} }
func (m *SignOutResponse) String() string { return proto.CompactTextString(m) }
func (*SignOutResponse) ProtoMessage()    {}
func (*SignOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{3}
}

func (m *SignOutResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignOutResponse.Unmarshal(m, b)
}
func (m *SignOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignOutResponse.Marshal(b, m, deterministic)
}
func (m *SignOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignOutResponse.Merge(m, src)
}
func (m *SignOutResponse) XXX_Size() int {
	return xxx_messageInfo_SignOutResponse.Size(m)
}
func (m *SignOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignOutResponse proto.InternalMessageInfo

type GetAllSessionsRequest struct {
	// The id of the organization
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area
	AreaId string `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// View to render.
	View                 string   `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllSessionsRequest) Reset()         { *m = GetAllSessionsRequest{} }
func (m *GetAllSessionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllSessionsRequest) ProtoMessage()    {}
func (*GetAllSessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{4}
}

func (m *GetAllSessionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllSessionsRequest.Unmarshal(m, b)
}
func (m *GetAllSessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllSessionsRequest.Marshal(b, m, deterministic)
}
func (m *GetAllSessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllSessionsRequest.Merge(m, src)
}
func (m *GetAllSessionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllSessionsRequest.Size(m)
}
func (m *GetAllSessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllSessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllSessionsRequest proto.InternalMessageInfo

func (m *GetAllSessionsRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetAllSessionsRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

func (m *GetAllSessionsRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

type SessionCollection struct {
	Field                []*Session `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SessionCollection) Reset()         { *m = SessionCollection{} }
func (m *SessionCollection) String() string { return proto.CompactTextString(m) }
func (*SessionCollection) ProtoMessage()    {}
func (*SessionCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{5}
}

func (m *SessionCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionCollection.Unmarshal(m, b)
}
func (m *SessionCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionCollection.Marshal(b, m, deterministic)
}
func (m *SessionCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCollection.Merge(m, src)
}
func (m *SessionCollection) XXX_Size() int {
	return xxx_messageInfo_SessionCollection.Size(m)
}
func (m *SessionCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCollection.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCollection proto.InternalMessageInfo

func (m *SessionCollection) GetField() []*Session {
	if m != nil {
		return m.Field
	}
	return nil
}

// Session is the type used to represents an application session.
type Session struct {
	// The UUID of the session.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of entity in the document database.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The id of the associated organization.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The id of the associated area.
	AreaId string `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// The UUID of the user.
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The UUID of the token.
	TokenId string `protobuf:"bytes,6,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// The date/time the record was created.
	CreatedAt string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The date/time the record was updated.
	UpdatedAt string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The date/time the session will expire.
	ExpiresAt            string   `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{6}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Session) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *Session) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

func (m *Session) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Session) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *Session) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Session) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Session) GetExpiresAt() string {
	if m != nil {
		return m.ExpiresAt
	}
	return ""
}

type GetIDPURLRequest struct {
	// The target host.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The id of the organization
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area
	AreaId               string   `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIDPURLRequest) Reset()         { *m = GetIDPURLRequest{} }
func (m *GetIDPURLRequest) String() string { return proto.CompactTextString(m) }
func (*GetIDPURLRequest) ProtoMessage()    {}
func (*GetIDPURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{7}
}

func (m *GetIDPURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDPURLRequest.Unmarshal(m, b)
}
func (m *GetIDPURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDPURLRequest.Marshal(b, m, deterministic)
}
func (m *GetIDPURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDPURLRequest.Merge(m, src)
}
func (m *GetIDPURLRequest) XXX_Size() int {
	return xxx_messageInfo_GetIDPURLRequest.Size(m)
}
func (m *GetIDPURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDPURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDPURLRequest proto.InternalMessageInfo

func (m *GetIDPURLRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GetIDPURLRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetIDPURLRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

type GetIDPURLResponse struct {
	// The url to redirect the caller to.
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIDPURLResponse) Reset()         { *m = GetIDPURLResponse{} }
func (m *GetIDPURLResponse) String() string { return proto.CompactTextString(m) }
func (*GetIDPURLResponse) ProtoMessage()    {}
func (*GetIDPURLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{8}
}

func (m *GetIDPURLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIDPURLResponse.Unmarshal(m, b)
}
func (m *GetIDPURLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIDPURLResponse.Marshal(b, m, deterministic)
}
func (m *GetIDPURLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIDPURLResponse.Merge(m, src)
}
func (m *GetIDPURLResponse) XXX_Size() int {
	return xxx_messageInfo_GetIDPURLResponse.Size(m)
}
func (m *GetIDPURLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIDPURLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIDPURLResponse proto.InternalMessageInfo

func (m *GetIDPURLResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type CheckTokenRequest struct {
	// The id of the organization
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area
	AreaId               string   `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTokenRequest) Reset()         { *m = CheckTokenRequest{} }
func (m *CheckTokenRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTokenRequest) ProtoMessage()    {}
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{9}
}

func (m *CheckTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTokenRequest.Unmarshal(m, b)
}
func (m *CheckTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTokenRequest.Marshal(b, m, deterministic)
}
func (m *CheckTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenRequest.Merge(m, src)
}
func (m *CheckTokenRequest) XXX_Size() int {
	return xxx_messageInfo_CheckTokenRequest.Size(m)
}
func (m *CheckTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenRequest proto.InternalMessageInfo

func (m *CheckTokenRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *CheckTokenRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

type CheckTokenResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTokenResponse) Reset()         { *m = CheckTokenResponse{} }
func (m *CheckTokenResponse) String() string { return proto.CompactTextString(m) }
func (*CheckTokenResponse) ProtoMessage()    {}
func (*CheckTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{10}
}

func (m *CheckTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTokenResponse.Unmarshal(m, b)
}
func (m *CheckTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTokenResponse.Marshal(b, m, deterministic)
}
func (m *CheckTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTokenResponse.Merge(m, src)
}
func (m *CheckTokenResponse) XXX_Size() int {
	return xxx_messageInfo_CheckTokenResponse.Size(m)
}
func (m *CheckTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTokenResponse proto.InternalMessageInfo

type GetUsersByIDRequest struct {
	// The id of the organization
	OrgId string `protobuf:"bytes,3,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// The id of the area
	AreaId string `protobuf:"bytes,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// The ids of the users to retrieve
	Ids []string `protobuf:"bytes,5,rep,name=ids,proto3" json:"ids,omitempty"`
	// The view used for the returned users
	View string `protobuf:"bytes,6,opt,name=view,proto3" json:"view,omitempty"`
	// defines if only active users must be returned
	ActiveOnly           bool     `protobuf:"varint,7,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUsersByIDRequest) Reset()         { *m = GetUsersByIDRequest{} }
func (m *GetUsersByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetUsersByIDRequest) ProtoMessage()    {}
func (*GetUsersByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{11}
}

func (m *GetUsersByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUsersByIDRequest.Unmarshal(m, b)
}
func (m *GetUsersByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUsersByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetUsersByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersByIDRequest.Merge(m, src)
}
func (m *GetUsersByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetUsersByIDRequest.Size(m)
}
func (m *GetUsersByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersByIDRequest proto.InternalMessageInfo

func (m *GetUsersByIDRequest) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *GetUsersByIDRequest) GetAreaId() string {
	if m != nil {
		return m.AreaId
	}
	return ""
}

func (m *GetUsersByIDRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetUsersByIDRequest) GetView() string {
	if m != nil {
		return m.View
	}
	return ""
}

func (m *GetUsersByIDRequest) GetActiveOnly() bool {
	if m != nil {
		return m.ActiveOnly
	}
	return false
}

type RegisteredUserCollection struct {
	Field                []*RegisteredUser `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisteredUserCollection) Reset()         { *m = RegisteredUserCollection{} }
func (m *RegisteredUserCollection) String() string { return proto.CompactTextString(m) }
func (*RegisteredUserCollection) ProtoMessage()    {}
func (*RegisteredUserCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{12}
}

func (m *RegisteredUserCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredUserCollection.Unmarshal(m, b)
}
func (m *RegisteredUserCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredUserCollection.Marshal(b, m, deterministic)
}
func (m *RegisteredUserCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredUserCollection.Merge(m, src)
}
func (m *RegisteredUserCollection) XXX_Size() int {
	return xxx_messageInfo_RegisteredUserCollection.Size(m)
}
func (m *RegisteredUserCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredUserCollection.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredUserCollection proto.InternalMessageInfo

func (m *RegisteredUserCollection) GetField() []*RegisteredUser {
	if m != nil {
		return m.Field
	}
	return nil
}

// Represents a registered user.
type RegisteredUser struct {
	// The UUID of the underlying or referenced entity.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The first name of the user.
	FirstName string `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// The last name of the user.
	LastName string `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Defines if the entity is active.
	Active bool `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// The birth name of the user.
	BirthName string `protobuf:"bytes,9,opt,name=birth_name,json=birthName,proto3" json:"birth_name,omitempty"`
	// The address of the user.
	Address string `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	// The id of the city.
	CityId string `protobuf:"bytes,11,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	// The ISO 3166-1 code of the country.
	CountryId string `protobuf:"bytes,12,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	// The latitude of the user's address.
	Latitude float64 `protobuf:"fixed64,13,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The longitude of the user's address.
	Longitude float64 `protobuf:"fixed64,14,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// The birth date of the user.
	BirthDate string `protobuf:"bytes,15,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	// The gender of the user.
	Gender string `protobuf:"bytes,16,opt,name=gender,proto3" json:"gender,omitempty"`
	// The ISO code of the user's prefered language.
	LanguageId string `protobuf:"bytes,17,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	// The email of the user.
	Email string `protobuf:"bytes,18,opt,name=email,proto3" json:"email,omitempty"`
	// The login of the user.
	Login string `protobuf:"bytes,19,opt,name=login,proto3" json:"login,omitempty"`
	// The user mobile phone number.
	Mobile string `protobuf:"bytes,25,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// Defines if this user is a B2C user.
	B2C bool `protobuf:"varint,26,opt,name=b2_c,json=b2C,proto3" json:"b2_c,omitempty"`
	// The date/time the record was created.
	CreatedAt string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The date/time the record was last updated.
	UpdatedAt string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The id of organization where the user was created.
	OrganizationId string `protobuf:"bytes,27,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The list of the user roles.
	Roles                []string `protobuf:"bytes,28,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisteredUser) Reset()         { *m = RegisteredUser{} }
func (m *RegisteredUser) String() string { return proto.CompactTextString(m) }
func (*RegisteredUser) ProtoMessage()    {}
func (*RegisteredUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_5784444998533acf, []int{13}
}

func (m *RegisteredUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisteredUser.Unmarshal(m, b)
}
func (m *RegisteredUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisteredUser.Marshal(b, m, deterministic)
}
func (m *RegisteredUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredUser.Merge(m, src)
}
func (m *RegisteredUser) XXX_Size() int {
	return xxx_messageInfo_RegisteredUser.Size(m)
}
func (m *RegisteredUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredUser.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredUser proto.InternalMessageInfo

func (m *RegisteredUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisteredUser) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisteredUser) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisteredUser) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *RegisteredUser) GetBirthName() string {
	if m != nil {
		return m.BirthName
	}
	return ""
}

func (m *RegisteredUser) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisteredUser) GetCityId() string {
	if m != nil {
		return m.CityId
	}
	return ""
}

func (m *RegisteredUser) GetCountryId() string {
	if m != nil {
		return m.CountryId
	}
	return ""
}

func (m *RegisteredUser) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *RegisteredUser) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *RegisteredUser) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *RegisteredUser) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *RegisteredUser) GetLanguageId() string {
	if m != nil {
		return m.LanguageId
	}
	return ""
}

func (m *RegisteredUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisteredUser) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *RegisteredUser) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *RegisteredUser) GetB2C() bool {
	if m != nil {
		return m.B2C
	}
	return false
}

func (m *RegisteredUser) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *RegisteredUser) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *RegisteredUser) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *RegisteredUser) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*SignInRequest)(nil), "userquery.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "userquery.SignInResponse")
	proto.RegisterType((*SignOutRequest)(nil), "userquery.SignOutRequest")
	proto.RegisterType((*SignOutResponse)(nil), "userquery.SignOutResponse")
	proto.RegisterType((*GetAllSessionsRequest)(nil), "userquery.GetAllSessionsRequest")
	proto.RegisterType((*SessionCollection)(nil), "userquery.SessionCollection")
	proto.RegisterType((*Session)(nil), "userquery.Session")
	proto.RegisterType((*GetIDPURLRequest)(nil), "userquery.GetIDPURLRequest")
	proto.RegisterType((*GetIDPURLResponse)(nil), "userquery.GetIDPURLResponse")
	proto.RegisterType((*CheckTokenRequest)(nil), "userquery.CheckTokenRequest")
	proto.RegisterType((*CheckTokenResponse)(nil), "userquery.CheckTokenResponse")
	proto.RegisterType((*GetUsersByIDRequest)(nil), "userquery.GetUsersByIDRequest")
	proto.RegisterType((*RegisteredUserCollection)(nil), "userquery.RegisteredUserCollection")
	proto.RegisterType((*RegisteredUser)(nil), "userquery.RegisteredUser")
}

func init() { proto.RegisterFile("userquery.proto", fileDescriptor_5784444998533acf) }

var fileDescriptor_5784444998533acf = []byte{
	// 844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0x85, 0xac, 0xef, 0x71, 0x2c, 0x5b, 0x8c, 0xd3, 0xd0, 0xb2, 0xdd, 0x0a, 0x5b, 0xa0, 0xf5,
	0x29, 0x01, 0xdc, 0x73, 0xd0, 0x38, 0x36, 0x6a, 0x2c, 0x5a, 0x34, 0x81, 0x5c, 0xf7, 0xd0, 0x1e,
	0x04, 0x4a, 0x9c, 0xac, 0x09, 0xaf, 0x97, 0x0a, 0xc9, 0x4d, 0xab, 0xfe, 0x86, 0xfe, 0xae, 0x5e,
	0xfa, 0x9f, 0x8a, 0x82, 0x1f, 0xab, 0xdd, 0xb5, 0xe4, 0x00, 0xf1, 0x4d, 0xef, 0x3d, 0xee, 0xcc,
	0x70, 0xf8, 0x38, 0x14, 0xec, 0xe6, 0x1a, 0xd5, 0x87, 0x1c, 0xd5, 0xf2, 0xc5, 0x42, 0x49, 0x23,
	0x49, 0x7f, 0x45, 0x44, 0xdf, 0xc3, 0xce, 0x95, 0x48, 0xb2, 0x38, 0x9b, 0xe0, 0x87, 0x1c, 0xb5,
	0x21, 0xcf, 0xa0, 0x23, 0x55, 0x32, 0x15, 0x9c, 0xb6, 0xc6, 0x8d, 0x93, 0xfe, 0xa4, 0x2d, 0x55,
	0x12, 0x73, 0xf2, 0x1c, 0xba, 0x4c, 0x21, 0xb3, 0x7c, 0xdb, 0xf1, 0x1d, 0x0b, 0x63, 0x1e, 0x7d,
	0x03, 0x83, 0x22, 0x80, 0x5e, 0xc8, 0x4c, 0x23, 0xd9, 0x87, 0xb6, 0x91, 0xb7, 0x98, 0xd1, 0x86,
	0x0f, 0xe0, 0x40, 0xf4, 0xda, 0xaf, 0x7b, 0x9b, 0x9b, 0xf5, 0x4c, 0xcd, 0x07, 0x32, 0xb5, 0x6a,
	0x99, 0x86, 0xb0, 0xbb, 0x8a, 0xe0, 0x53, 0x45, 0xbf, 0xc3, 0xb3, 0x4b, 0x34, 0x67, 0x69, 0x7a,
	0x85, 0x5a, 0x0b, 0x99, 0xe9, 0x47, 0xc6, 0x26, 0x04, 0x5a, 0x1f, 0x05, 0xfe, 0x11, 0xf6, 0xe6,
	0x7e, 0x47, 0xaf, 0x60, 0x18, 0xc2, 0x9e, 0xcb, 0x34, 0xc5, 0xb9, 0x11, 0x32, 0x23, 0x27, 0xd0,
	0x7e, 0x2f, 0x30, 0xe5, 0xb4, 0x31, 0x6e, 0x9e, 0x6c, 0x9f, 0x92, 0x17, 0x65, 0x6f, 0xc3, 0xe2,
	0x89, 0x5f, 0x10, 0xfd, 0xd7, 0x80, 0x6e, 0xa0, 0xc8, 0x00, 0xb6, 0x04, 0x0f, 0xfd, 0xd8, 0x12,
	0x9c, 0xec, 0x41, 0xf3, 0x16, 0x97, 0x74, 0xcb, 0x11, 0xf6, 0x27, 0xf9, 0x16, 0x76, 0xa5, 0x4a,
	0x58, 0x26, 0xfe, 0x62, 0x36, 0x4f, 0x59, 0xf9, 0xa0, 0x4a, 0x7f, 0x6a, 0x0b, 0xcf, 0xa1, 0x6b,
	0x6b, 0xa9, 0x9c, 0x90, 0x85, 0x31, 0x27, 0x07, 0xd0, 0x73, 0x47, 0x60, 0x95, 0x8e, 0x53, 0xba,
	0x0e, 0xc7, 0x9c, 0x1c, 0x03, 0xcc, 0x15, 0x32, 0x83, 0x7c, 0xca, 0x0c, 0xed, 0x3a, 0xb1, 0x1f,
	0x98, 0x33, 0x63, 0xe5, 0x7c, 0xc1, 0x0b, 0xb9, 0xe7, 0xe5, 0xc0, 0x78, 0x19, 0xff, 0x5c, 0x08,
	0x85, 0xda, 0xca, 0x7d, 0x2f, 0x07, 0xe6, 0xcc, 0x44, 0xbf, 0xc2, 0xde, 0x25, 0x9a, 0xf8, 0xe2,
	0xdd, 0xf5, 0xe4, 0xa7, 0xe2, 0x5c, 0x08, 0xb4, 0x6e, 0xa4, 0x36, 0x61, 0xe7, 0xee, 0xf7, 0x67,
	0xfb, 0xe0, 0x25, 0x0c, 0x2b, 0x71, 0x83, 0xe9, 0x46, 0xd0, 0x4b, 0xe5, 0xdc, 0x35, 0x29, 0xf4,
	0x79, 0x85, 0xa3, 0x73, 0x18, 0x9e, 0xdf, 0xe0, 0xfc, 0xf6, 0x17, 0xbb, 0xeb, 0xc7, 0xba, 0x6f,
	0x1f, 0x48, 0x35, 0x48, 0x30, 0xe0, 0xdf, 0x0d, 0x78, 0x7a, 0x89, 0xe6, 0x5a, 0xa3, 0xd2, 0x6f,
	0x96, 0xf1, 0xc5, 0x63, 0xfd, 0xb7, 0x07, 0x4d, 0xc1, 0x35, 0x6d, 0x8f, 0x9b, 0xd6, 0x10, 0x82,
	0xeb, 0x95, 0x23, 0x3b, 0xa5, 0x23, 0xc9, 0x57, 0xb0, 0xcd, 0xe6, 0x46, 0x7c, 0xc4, 0xa9, 0xcc,
	0xd2, 0xa5, 0x3b, 0xaf, 0xde, 0x04, 0x3c, 0xf5, 0x36, 0x4b, 0x97, 0xd1, 0x8f, 0x40, 0x27, 0x98,
	0x08, 0x6d, 0x50, 0x21, 0xb7, 0x45, 0x55, 0x9c, 0xfb, 0xb2, 0xee, 0xdc, 0x83, 0x8a, 0x73, 0xeb,
	0xdf, 0x14, 0x06, 0xfe, 0xb7, 0x05, 0x83, 0xba, 0xb2, 0xe6, 0xe3, 0x63, 0x80, 0xf7, 0x42, 0x69,
	0x33, 0xcd, 0xd8, 0x1d, 0x16, 0xfe, 0x71, 0xcc, 0xcf, 0xec, 0x0e, 0xc9, 0x21, 0xf4, 0x53, 0x56,
	0xa8, 0xbd, 0x70, 0x2a, 0x2c, 0x88, 0x5f, 0x40, 0xc7, 0x57, 0xee, 0xb6, 0xd8, 0x9b, 0x04, 0x64,
	0x63, 0xce, 0x84, 0x32, 0x37, 0xfe, 0xab, 0xe0, 0x2a, 0xc7, 0xb8, 0xcf, 0x28, 0x74, 0x19, 0xe7,
	0x0a, 0xb5, 0xa6, 0xe0, 0xcd, 0x1c, 0xa0, 0x6d, 0xee, 0x5c, 0x98, 0xa5, 0x6d, 0xee, 0xb6, 0x6f,
	0xae, 0x85, 0xc1, 0xe5, 0x32, 0xcf, 0x8c, 0x72, 0xda, 0x93, 0xe0, 0x72, 0xcf, 0xc4, 0xdc, 0x59,
	0x87, 0x19, 0x61, 0x72, 0x8e, 0x74, 0x67, 0xdc, 0x38, 0x69, 0x4c, 0x56, 0x98, 0x1c, 0x41, 0x3f,
	0x95, 0x59, 0xe2, 0xc5, 0x81, 0x13, 0x4b, 0xa2, 0x2c, 0xd5, 0xde, 0x08, 0xba, 0x5b, 0x29, 0xf5,
	0x82, 0x19, 0xb7, 0xc3, 0x04, 0x33, 0x8e, 0x8a, 0xee, 0xf9, 0x7a, 0x3c, 0xb2, 0xc7, 0x98, 0xb2,
	0x2c, 0xc9, 0x59, 0x82, 0xb6, 0xa0, 0xa1, 0x13, 0xa1, 0xa0, 0x62, 0x6e, 0x27, 0x28, 0xde, 0x31,
	0x91, 0x52, 0xe2, 0xcd, 0xe3, 0x80, 0x65, 0x53, 0x99, 0x88, 0x8c, 0x3e, 0xf5, 0xac, 0x03, 0x36,
	0xc9, 0x9d, 0x9c, 0x89, 0x14, 0xe9, 0x81, 0x4f, 0xe2, 0x11, 0x19, 0x42, 0x6b, 0x76, 0x3a, 0x9d,
	0xd3, 0x91, 0x6b, 0x6e, 0x73, 0x76, 0x7a, 0x7e, 0xef, 0xb6, 0xb7, 0x3e, 0x7d, 0xdb, 0xdb, 0xf7,
	0x6f, 0xfb, 0x86, 0x09, 0x75, 0xb8, 0x71, 0x42, 0xed, 0x43, 0x5b, 0xc9, 0x14, 0x35, 0x3d, 0x72,
	0x6e, 0xf6, 0xe0, 0xf4, 0x9f, 0x26, 0xf4, 0xaf, 0x0b, 0xc7, 0x91, 0x57, 0xd0, 0xf1, 0xaf, 0x06,
	0xa1, 0xd5, 0x09, 0x5a, 0x7d, 0x89, 0x46, 0x07, 0x1b, 0x94, 0x70, 0xdb, 0x5f, 0x43, 0x37, 0x3c,
	0x05, 0xe4, 0xfe, 0xaa, 0xf2, 0x81, 0x19, 0x8d, 0x36, 0x49, 0x21, 0xc2, 0x3b, 0x18, 0xd4, 0x5f,
	0x0e, 0x32, 0xae, 0xac, 0xde, 0xf8, 0xa8, 0x8c, 0x8e, 0xd6, 0x87, 0x7d, 0xe5, 0x7e, 0xfd, 0x00,
	0xfd, 0xd5, 0x58, 0x22, 0x87, 0xf5, 0x60, 0xb5, 0x21, 0x58, 0x8b, 0xb3, 0x3e, 0xc9, 0x62, 0x80,
	0x72, 0xd0, 0x90, 0xea, 0xda, 0xb5, 0x21, 0x36, 0x3a, 0x7e, 0x40, 0x0d, 0xa1, 0xae, 0xe0, 0x49,
	0x75, 0x38, 0x91, 0x2f, 0xeb, 0x89, 0xef, 0x4f, 0xad, 0xd1, 0xd7, 0x0f, 0xce, 0x84, 0x72, 0x9f,
	0x6f, 0x76, 0x7e, 0xdb, 0x5e, 0xad, 0x5a, 0xcc, 0x66, 0x1d, 0xf7, 0x97, 0xe2, 0xbb, 0xff, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x7d, 0x80, 0x4b, 0x65, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserqueryClient is the client API for Userquery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserqueryClient interface {
	// Signs a user in.
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// Signs a user out.
	SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error)
	// Returns the currently active sessions.
	GetAllSessions(ctx context.Context, in *GetAllSessionsRequest, opts ...grpc.CallOption) (*SessionCollection, error)
	// Returns the URL of the IDP to redirect the user to.
	GetIDPURL(ctx context.Context, in *GetIDPURLRequest, opts ...grpc.CallOption) (*GetIDPURLResponse, error)
	// Checks if the passed token is valid.
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error)
	// Returns the users with the specified ids.
	GetUsersByID(ctx context.Context, in *GetUsersByIDRequest, opts ...grpc.CallOption) (*RegisteredUserCollection, error)
}

type userqueryClient struct {
	cc *grpc.ClientConn
}

func NewUserqueryClient(cc *grpc.ClientConn) UserqueryClient {
	return &userqueryClient{cc}
}

func (c *userqueryClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userqueryClient) SignOut(ctx context.Context, in *SignOutRequest, opts ...grpc.CallOption) (*SignOutResponse, error) {
	out := new(SignOutResponse)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userqueryClient) GetAllSessions(ctx context.Context, in *GetAllSessionsRequest, opts ...grpc.CallOption) (*SessionCollection, error) {
	out := new(SessionCollection)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/GetAllSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userqueryClient) GetIDPURL(ctx context.Context, in *GetIDPURLRequest, opts ...grpc.CallOption) (*GetIDPURLResponse, error) {
	out := new(GetIDPURLResponse)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/GetIDPURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userqueryClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenResponse, error) {
	out := new(CheckTokenResponse)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userqueryClient) GetUsersByID(ctx context.Context, in *GetUsersByIDRequest, opts ...grpc.CallOption) (*RegisteredUserCollection, error) {
	out := new(RegisteredUserCollection)
	err := c.cc.Invoke(ctx, "/userquery.Userquery/GetUsersByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserqueryServer is the server API for Userquery service.
type UserqueryServer interface {
	// Signs a user in.
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// Signs a user out.
	SignOut(context.Context, *SignOutRequest) (*SignOutResponse, error)
	// Returns the currently active sessions.
	GetAllSessions(context.Context, *GetAllSessionsRequest) (*SessionCollection, error)
	// Returns the URL of the IDP to redirect the user to.
	GetIDPURL(context.Context, *GetIDPURLRequest) (*GetIDPURLResponse, error)
	// Checks if the passed token is valid.
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenResponse, error)
	// Returns the users with the specified ids.
	GetUsersByID(context.Context, *GetUsersByIDRequest) (*RegisteredUserCollection, error)
}

func RegisterUserqueryServer(s *grpc.Server, srv UserqueryServer) {
	s.RegisterService(&_Userquery_serviceDesc, srv)
}

func _Userquery_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userquery_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).SignOut(ctx, req.(*SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userquery_GetAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).GetAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/GetAllSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).GetAllSessions(ctx, req.(*GetAllSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userquery_GetIDPURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDPURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).GetIDPURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/GetIDPURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).GetIDPURL(ctx, req.(*GetIDPURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userquery_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userquery_GetUsersByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserqueryServer).GetUsersByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userquery.Userquery/GetUsersByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserqueryServer).GetUsersByID(ctx, req.(*GetUsersByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Userquery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userquery.Userquery",
	HandlerType: (*UserqueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Userquery_SignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _Userquery_SignOut_Handler,
		},
		{
			MethodName: "GetAllSessions",
			Handler:    _Userquery_GetAllSessions_Handler,
		},
		{
			MethodName: "GetIDPURL",
			Handler:    _Userquery_GetIDPURL_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _Userquery_CheckToken_Handler,
		},
		{
			MethodName: "GetUsersByID",
			Handler:    _Userquery_GetUsersByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userquery.proto",
}
