// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery HTTP client CLI support package
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	userqueryc "gitlab.com/wiserskills/v3/services/userquery/gen/http/userquery/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `userquery (sign-in|sign-out|get-all-sessions|get-idpurl|saml-sign-in|check-token|get-users-by-id|health|metrics|swagger|swagger-ui)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` userquery sign-in --key "abcdef12345" --org-id "WiserSKILLS" --area-id "PROD" --username "user" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		userqueryFlags = flag.NewFlagSet("userquery", flag.ContinueOnError)

		userquerySignInFlags        = flag.NewFlagSet("sign-in", flag.ExitOnError)
		userquerySignInKeyFlag      = userquerySignInFlags.String("key", "", "")
		userquerySignInOrgIDFlag    = userquerySignInFlags.String("org-id", "REQUIRED", "")
		userquerySignInAreaIDFlag   = userquerySignInFlags.String("area-id", "REQUIRED", "")
		userquerySignInUsernameFlag = userquerySignInFlags.String("username", "REQUIRED", "Username used to perform signin")
		userquerySignInPasswordFlag = userquerySignInFlags.String("password", "REQUIRED", "Password used to perform signin")

		userquerySignOutFlags      = flag.NewFlagSet("sign-out", flag.ExitOnError)
		userquerySignOutTokenFlag  = userquerySignOutFlags.String("token", "REQUIRED", "")
		userquerySignOutKeyFlag    = userquerySignOutFlags.String("key", "REQUIRED", "")
		userquerySignOutOrgIDFlag  = userquerySignOutFlags.String("org-id", "REQUIRED", "")
		userquerySignOutAreaIDFlag = userquerySignOutFlags.String("area-id", "REQUIRED", "")

		userqueryGetAllSessionsFlags      = flag.NewFlagSet("get-all-sessions", flag.ExitOnError)
		userqueryGetAllSessionsViewFlag   = userqueryGetAllSessionsFlags.String("view", "", "")
		userqueryGetAllSessionsTokenFlag  = userqueryGetAllSessionsFlags.String("token", "REQUIRED", "")
		userqueryGetAllSessionsKeyFlag    = userqueryGetAllSessionsFlags.String("key", "REQUIRED", "")
		userqueryGetAllSessionsOrgIDFlag  = userqueryGetAllSessionsFlags.String("org-id", "REQUIRED", "")
		userqueryGetAllSessionsAreaIDFlag = userqueryGetAllSessionsFlags.String("area-id", "REQUIRED", "")

		userqueryGetIDPURLFlags      = flag.NewFlagSet("get-idpurl", flag.ExitOnError)
		userqueryGetIDPURLKeyFlag    = userqueryGetIDPURLFlags.String("key", "REQUIRED", "")
		userqueryGetIDPURLOrgIDFlag  = userqueryGetIDPURLFlags.String("org-id", "REQUIRED", "")
		userqueryGetIDPURLAreaIDFlag = userqueryGetIDPURLFlags.String("area-id", "REQUIRED", "")
		userqueryGetIDPURLHostFlag   = userqueryGetIDPURLFlags.String("host", "REQUIRED", "")

		userquerySamlSignInFlags = flag.NewFlagSet("saml-sign-in", flag.ExitOnError)
		userquerySamlSignInPFlag = userquerySamlSignInFlags.String("p", "REQUIRED", "string is the payload type of the userquery service SamlSignIn method.")

		userqueryCheckTokenFlags      = flag.NewFlagSet("check-token", flag.ExitOnError)
		userqueryCheckTokenTokenFlag  = userqueryCheckTokenFlags.String("token", "REQUIRED", "")
		userqueryCheckTokenKeyFlag    = userqueryCheckTokenFlags.String("key", "REQUIRED", "")
		userqueryCheckTokenOrgIDFlag  = userqueryCheckTokenFlags.String("org-id", "REQUIRED", "")
		userqueryCheckTokenAreaIDFlag = userqueryCheckTokenFlags.String("area-id", "REQUIRED", "")

		userqueryGetUsersByIDFlags      = flag.NewFlagSet("get-users-by-id", flag.ExitOnError)
		userqueryGetUsersByIDBodyFlag   = userqueryGetUsersByIDFlags.String("body", "REQUIRED", "")
		userqueryGetUsersByIDViewFlag   = userqueryGetUsersByIDFlags.String("view", "", "")
		userqueryGetUsersByIDTokenFlag  = userqueryGetUsersByIDFlags.String("token", "REQUIRED", "")
		userqueryGetUsersByIDKeyFlag    = userqueryGetUsersByIDFlags.String("key", "REQUIRED", "")
		userqueryGetUsersByIDOrgIDFlag  = userqueryGetUsersByIDFlags.String("org-id", "REQUIRED", "")
		userqueryGetUsersByIDAreaIDFlag = userqueryGetUsersByIDFlags.String("area-id", "REQUIRED", "")

		userqueryHealthFlags = flag.NewFlagSet("health", flag.ExitOnError)

		userqueryMetricsFlags = flag.NewFlagSet("metrics", flag.ExitOnError)

		userquerySwaggerFlags = flag.NewFlagSet("swagger", flag.ExitOnError)

		userquerySwaggerUIFlags = flag.NewFlagSet("swagger-ui", flag.ExitOnError)
	)
	userqueryFlags.Usage = userqueryUsage
	userquerySignInFlags.Usage = userquerySignInUsage
	userquerySignOutFlags.Usage = userquerySignOutUsage
	userqueryGetAllSessionsFlags.Usage = userqueryGetAllSessionsUsage
	userqueryGetIDPURLFlags.Usage = userqueryGetIDPURLUsage
	userquerySamlSignInFlags.Usage = userquerySamlSignInUsage
	userqueryCheckTokenFlags.Usage = userqueryCheckTokenUsage
	userqueryGetUsersByIDFlags.Usage = userqueryGetUsersByIDUsage
	userqueryHealthFlags.Usage = userqueryHealthUsage
	userqueryMetricsFlags.Usage = userqueryMetricsUsage
	userquerySwaggerFlags.Usage = userquerySwaggerUsage
	userquerySwaggerUIFlags.Usage = userquerySwaggerUIUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "userquery":
			svcf = userqueryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "userquery":
			switch epn {
			case "sign-in":
				epf = userquerySignInFlags

			case "sign-out":
				epf = userquerySignOutFlags

			case "get-all-sessions":
				epf = userqueryGetAllSessionsFlags

			case "get-idpurl":
				epf = userqueryGetIDPURLFlags

			case "saml-sign-in":
				epf = userquerySamlSignInFlags

			case "check-token":
				epf = userqueryCheckTokenFlags

			case "get-users-by-id":
				epf = userqueryGetUsersByIDFlags

			case "health":
				epf = userqueryHealthFlags

			case "metrics":
				epf = userqueryMetricsFlags

			case "swagger":
				epf = userquerySwaggerFlags

			case "swagger-ui":
				epf = userquerySwaggerUIFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "userquery":
			c := userqueryc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "sign-in":
				endpoint = c.SignIn()
				data, err = userqueryc.BuildSignInPayload(*userquerySignInKeyFlag, *userquerySignInOrgIDFlag, *userquerySignInAreaIDFlag, *userquerySignInUsernameFlag, *userquerySignInPasswordFlag)
			case "sign-out":
				endpoint = c.SignOut()
				data, err = userqueryc.BuildSignOutPayload(*userquerySignOutTokenFlag, *userquerySignOutKeyFlag, *userquerySignOutOrgIDFlag, *userquerySignOutAreaIDFlag)
			case "get-all-sessions":
				endpoint = c.GetAllSessions()
				data, err = userqueryc.BuildGetAllSessionsPayload(*userqueryGetAllSessionsViewFlag, *userqueryGetAllSessionsTokenFlag, *userqueryGetAllSessionsKeyFlag, *userqueryGetAllSessionsOrgIDFlag, *userqueryGetAllSessionsAreaIDFlag)
			case "get-idpurl":
				endpoint = c.GetIDPURL()
				data, err = userqueryc.BuildGetIDPURLPayload(*userqueryGetIDPURLKeyFlag, *userqueryGetIDPURLOrgIDFlag, *userqueryGetIDPURLAreaIDFlag, *userqueryGetIDPURLHostFlag)
			case "saml-sign-in":
				endpoint = c.SamlSignIn()
				data = *userquerySamlSignInPFlag
			case "check-token":
				endpoint = c.CheckToken()
				data, err = userqueryc.BuildCheckTokenPayload(*userqueryCheckTokenTokenFlag, *userqueryCheckTokenKeyFlag, *userqueryCheckTokenOrgIDFlag, *userqueryCheckTokenAreaIDFlag)
			case "get-users-by-id":
				endpoint = c.GetUsersByID()
				data, err = userqueryc.BuildGetUsersByIDPayload(*userqueryGetUsersByIDBodyFlag, *userqueryGetUsersByIDViewFlag, *userqueryGetUsersByIDTokenFlag, *userqueryGetUsersByIDKeyFlag, *userqueryGetUsersByIDOrgIDFlag, *userqueryGetUsersByIDAreaIDFlag)
			case "health":
				endpoint = c.Health()
				data = nil
			case "metrics":
				endpoint = c.Metrics()
				data = nil
			case "swagger":
				endpoint = c.Swagger()
				data = nil
			case "swagger-ui":
				endpoint = c.SwaggerUI()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// userqueryUsage displays the usage of the userquery command and its
// subcommands.
func userqueryUsage() {
	fmt.Fprintf(os.Stderr, `API service to authenticate users. The service requires an ArangoDB server. Data synchronization with other services is done via a shared NATS Streaming event bus.
Usage:
    %s [globalflags] userquery COMMAND [flags]

COMMAND:
    sign-in: Signs a user in.
    sign-out: Signs a user out.
    get-all-sessions: Returns the currently active sessions.
    get-idpurl: Returns the URL of the IDP to redirect the user to.
    saml-sign-in: Call back endpoint called by the IDP once the user is authenticated.
    check-token: Checks if the passed token is valid.
    get-users-by-id: Returns the users with the specified ids.
    health: Health status endpoint.
    metrics: Prometheus metrics endpoint.
    swagger: Swagger service description endpoint.
    swagger-ui: Swagger UI service endpoint.

Additional help:
    %s userquery COMMAND --help
`, os.Args[0], os.Args[0])
}
func userquerySignInUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery sign-in -key STRING -org-id STRING -area-id STRING -username STRING -password STRING

Signs a user in.
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 
    -username STRING: Username used to perform signin
    -password STRING: Password used to perform signin

Example:
    `+os.Args[0]+` userquery sign-in --key "abcdef12345" --org-id "WiserSKILLS" --area-id "PROD" --username "user" --password "password"
`, os.Args[0])
}

func userquerySignOutUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery sign-out -token STRING -key STRING -org-id STRING -area-id STRING

Signs a user out.
    -token STRING: 
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 

Example:
    `+os.Args[0]+` userquery sign-out --token "Sint odio ut laudantium." --key "abcdef12345" --org-id "evg" --area-id "gd"
`, os.Args[0])
}

func userqueryGetAllSessionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-all-sessions -view STRING -token STRING -key STRING -org-id STRING -area-id STRING

Returns the currently active sessions.
    -view STRING: 
    -token STRING: 
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 

Example:
    `+os.Args[0]+` userquery get-all-sessions --view "tiny" --token "5rb" --key "abcdef12345" --org-id "9wa" --area-id "UAT"
`, os.Args[0])
}

func userqueryGetIDPURLUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-idpurl -key STRING -org-id STRING -area-id STRING -host STRING

Returns the URL of the IDP to redirect the user to.
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 
    -host STRING: 

Example:
    `+os.Args[0]+` userquery get-idpurl --key "abcdef12345" --org-id "j0h" --area-id "0of" --host "Eligendi cum saepe molestiae."
`, os.Args[0])
}

func userquerySamlSignInUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery saml-sign-in -p STRING

Call back endpoint called by the IDP once the user is authenticated.
    -p STRING: string is the payload type of the userquery service SamlSignIn method.

Example:
    `+os.Args[0]+` userquery saml-sign-in --p "Sed dolor et."
`, os.Args[0])
}

func userqueryCheckTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery check-token -token STRING -key STRING -org-id STRING -area-id STRING

Checks if the passed token is valid.
    -token STRING: 
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 

Example:
    `+os.Args[0]+` userquery check-token --token "Architecto cupiditate a." --key "abcdef12345" --org-id "bk5" --area-id "zyf"
`, os.Args[0])
}

func userqueryGetUsersByIDUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery get-users-by-id -body JSON -view STRING -token STRING -key STRING -org-id STRING -area-id STRING

Returns the users with the specified ids.
    -body JSON: 
    -view STRING: 
    -token STRING: 
    -key STRING: 
    -org-id STRING: 
    -area-id STRING: 

Example:
    `+os.Args[0]+` userquery get-users-by-id --body '[
      "Ullam error rerum et.",
      "Aut dignissimos enim dolor magnam.",
      "Aspernatur hic ad nihil illum alias.",
      "Animi laboriosam ad et tempora magnam corporis."
   ]' --view "Omnis facilis ut." --token "Fugiat consequatur non consequuntur perferendis nihil rerum." --key "abcdef12345" --org-id "lyc" --area-id "ia5"
`, os.Args[0])
}

func userqueryHealthUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery health

Health status endpoint.

Example:
    `+os.Args[0]+` userquery health
`, os.Args[0])
}

func userqueryMetricsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery metrics

Prometheus metrics endpoint.

Example:
    `+os.Args[0]+` userquery metrics
`, os.Args[0])
}

func userquerySwaggerUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery swagger

Swagger service description endpoint.

Example:
    `+os.Args[0]+` userquery swagger
`, os.Args[0])
}

func userquerySwaggerUIUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] userquery swagger-ui

Swagger UI service endpoint.

Example:
    `+os.Args[0]+` userquery swagger-ui
`, os.Args[0])
}
