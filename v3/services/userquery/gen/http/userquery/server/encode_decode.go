// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery HTTP server encoders and decoders
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package server

import (
	"context"
	"io"
	"net/http"
	"strings"
	"unicode/utf8"

	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	userqueryviews "gitlab.com/wiserskills/v3/services/userquery/gen/userquery/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSignInResponse returns an encoder for responses returned by the
// userquery SignIn endpoint.
func EncodeSignInResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userquery.JWTToken)
		enc := encoder(ctx, w)
		body := NewSignInResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSignInRequest returns a decoder for requests sent to the userquery
// SignIn endpoint.
func DecodeSignInRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			key    *string
			orgID  string
			areaID string
			err    error
		)
		keyRaw := r.Header.Get("X-API-KEY")
		if keyRaw != "" {
			key = &keyRaw
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "UAT" || areaID == "QA" || areaID == "DEV") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "UAT", "QA", "DEV"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSignInPayload(key, orgID, areaID)
		user, pass, ok := r.BasicAuth()
		if !ok {
			return nil, goa.MissingFieldError("Authorization", "header")
		}
		payload.Username = user
		payload.Password = pass

		return payload, nil
	}
}

// EncodeSignInError returns an encoder for errors returned by the SignIn
// userquery endpoint.
func EncodeSignInError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_authorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInNotAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_authorized")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "invalid_credentials":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInInvalidCredentialsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_credentials")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "password_expired":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInPasswordExpiredResponseBody(res)
			}
			w.Header().Set("goa-error", "password_expired")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "login_blocked":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInLoginBlockedResponseBody(res)
			}
			w.Header().Set("goa-error", "login_blocked")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignInUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSignOutResponse returns an encoder for responses returned by the
// userquery SignOut endpoint.
func EncodeSignOutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeSignOutRequest returns a decoder for requests sent to the userquery
// SignOut endpoint.
func DecodeSignOutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token  string
			key    string
			orgID  string
			areaID string
			err    error
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		key = r.Header.Get("X-API-KEY")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-API-KEY", "header"))
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		if utf8.RuneCountInString(orgID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orgID", orgID, utf8.RuneCountInString(orgID), 255, false))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "DEV" || areaID == "QA" || areaID == "UAT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
		}
		if utf8.RuneCountInString(areaID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 2, true))
		}
		if utf8.RuneCountInString(areaID) > 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 4, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSignOutTokenPayload(token, key, orgID, areaID)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeSignOutError returns an encoder for errors returned by the SignOut
// userquery endpoint.
func EncodeSignOutError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "token_expired":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutTokenExpiredResponseBody(res)
			}
			w.Header().Set("goa-error", "token_expired")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "token_invalid":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutTokenInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", "token_invalid")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_authorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutNotAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_authorized")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSignOutUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAllSessionsResponse returns an encoder for responses returned by
// the userquery GetAllSessions endpoint.
func EncodeGetAllSessionsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(userqueryviews.SessionCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewSessionResponseCollection(res.Projected)
		case "tiny":
			body = NewSessionResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAllSessionsRequest returns a decoder for requests sent to the
// userquery GetAllSessions endpoint.
func DecodeGetAllSessionsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			view   *string
			token  string
			key    string
			orgID  string
			areaID string
			err    error
		)
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = &viewRaw
		}
		if view != nil {
			if !(*view == "default" || *view == "tiny") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("view", *view, []interface{}{"default", "tiny"}))
			}
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if utf8.RuneCountInString(token) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("token", token, utf8.RuneCountInString(token), 1024, false))
		}
		key = r.Header.Get("X-API-KEY")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-API-KEY", "header"))
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		if utf8.RuneCountInString(orgID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orgID", orgID, utf8.RuneCountInString(orgID), 255, false))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "DEV" || areaID == "QA" || areaID == "UAT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAllSessionsAllSessionsPayload(view, token, key, orgID, areaID)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeGetAllSessionsError returns an encoder for errors returned by the
// GetAllSessions userquery endpoint.
func EncodeGetAllSessionsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "token_expired":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllSessionsTokenExpiredResponseBody(res)
			}
			w.Header().Set("goa-error", "token_expired")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "token_invalid":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllSessionsTokenInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", "token_invalid")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllSessionsBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllSessionsUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetIDPURLResponse returns an encoder for responses returned by the
// userquery GetIDPURL endpoint.
func EncodeGetIDPURLResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userquery.RedirectResult)
		w.Header().Set("Location", res.Location)
		w.WriteHeader(http.StatusPermanentRedirect)
		return nil
	}
}

// DecodeGetIDPURLRequest returns a decoder for requests sent to the userquery
// GetIDPURL endpoint.
func DecodeGetIDPURLRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			key    string
			orgID  string
			areaID string
			host   string
			err    error
		)
		key = r.Header.Get("X-API-KEY")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-API-KEY", "header"))
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		if utf8.RuneCountInString(orgID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orgID", orgID, utf8.RuneCountInString(orgID), 255, false))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "DEV" || areaID == "QA" || areaID == "UAT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
		}
		if utf8.RuneCountInString(areaID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 20, false))
		}
		host = r.Header.Get("Host")
		if host == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Host", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetIDPURLHostPayload(key, orgID, areaID, host)

		return payload, nil
	}
}

// EncodeGetIDPURLError returns an encoder for errors returned by the GetIDPURL
// userquery endpoint.
func EncodeGetIDPURLError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetIDPURLBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetIDPURLUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSamlSignInResponse returns an encoder for responses returned by the
// userquery SamlSignIn endpoint.
func EncodeSamlSignInResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userquery.RedirectResult)
		w.Header().Set("Location", res.Location)
		w.WriteHeader(http.StatusPermanentRedirect)
		return nil
	}
}

// DecodeSamlSignInRequest returns a decoder for requests sent to the userquery
// SamlSignIn endpoint.
func DecodeSamlSignInRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body string
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := body

		return payload, nil
	}
}

// EncodeSamlSignInError returns an encoder for errors returned by the
// SamlSignIn userquery endpoint.
func EncodeSamlSignInError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_authorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSamlSignInNotAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_authorized")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSamlSignInBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewSamlSignInUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCheckTokenResponse returns an encoder for responses returned by the
// userquery CheckToken endpoint.
func EncodeCheckTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCheckTokenRequest returns a decoder for requests sent to the userquery
// CheckToken endpoint.
func DecodeCheckTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			token  string
			key    string
			orgID  string
			areaID string
			err    error
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		key = r.Header.Get("X-API-KEY")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-API-KEY", "header"))
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		if utf8.RuneCountInString(orgID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orgID", orgID, utf8.RuneCountInString(orgID), 255, false))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "DEV" || areaID == "QA" || areaID == "UAT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
		}
		if utf8.RuneCountInString(areaID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 2, true))
		}
		if utf8.RuneCountInString(areaID) > 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 4, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCheckTokenTokenPayload(token, key, orgID, areaID)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeCheckTokenError returns an encoder for errors returned by the
// CheckToken userquery endpoint.
func EncodeCheckTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "token_expired":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenTokenExpiredResponseBody(res)
			}
			w.Header().Set("goa-error", "token_expired")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "token_invalid":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenTokenInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", "token_invalid")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_authorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenNotAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_authorized")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCheckTokenUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetUsersByIDResponse returns an encoder for responses returned by the
// userquery GetUsersByID endpoint.
func EncodeGetUsersByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(userqueryviews.RegisteredUserCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewRegisteredUserResponseCollection(res.Projected)
		case "tiny":
			body = NewRegisteredUserResponseTinyCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUsersByIDRequest returns a decoder for requests sent to the
// userquery GetUsersByID endpoint.
func DecodeGetUsersByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body []string
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			view   string
			token  string
			key    string
			orgID  string
			areaID string
		)
		viewRaw := r.URL.Query().Get("view")
		if viewRaw != "" {
			view = viewRaw
		} else {
			view = "default"
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		key = r.Header.Get("X-API-KEY")
		if key == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-API-KEY", "header"))
		}
		orgID = r.Header.Get("X-ORG-ID")
		if orgID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-ORG-ID", "header"))
		}
		if utf8.RuneCountInString(orgID) > 255 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("orgID", orgID, utf8.RuneCountInString(orgID), 255, false))
		}
		areaID = r.Header.Get("X-AREA-ID")
		if areaID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("X-AREA-ID", "header"))
		}
		if !(areaID == "PROD" || areaID == "DEV" || areaID == "QA" || areaID == "UAT") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("areaID", areaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
		}
		if utf8.RuneCountInString(areaID) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("areaID", areaID, utf8.RuneCountInString(areaID), 20, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUsersByIDManyUserIDPayload(body, view, token, key, orgID, areaID)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeGetUsersByIDError returns an encoder for errors returned by the
// GetUsersByID userquery endpoint.
func EncodeGetUsersByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "token_expired":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDTokenExpiredResponseBody(res)
			}
			w.Header().Set("goa-error", "token_expired")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "token_invalid":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDTokenInvalidResponseBody(res)
			}
			w.Header().Set("goa-error", "token_invalid")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "not_authorized":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDNotAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "not_authorized")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		case "bad_argument":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDBadArgumentResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_argument")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "unexpected_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetUsersByIDUnexpectedErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "unexpected_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeHealthResponse returns an encoder for responses returned by the
// userquery health endpoint.
func EncodeHealthResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*userquery.HealthResult)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewHealthResult(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}
