// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery HTTP server types
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package server

import (
	"unicode/utf8"

	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	userqueryviews "gitlab.com/wiserskills/v3/services/userquery/gen/userquery/views"
	goa "goa.design/goa/v3/pkg"
)

// SignInResponseBody is the type of the "userquery" service "SignIn" endpoint
// HTTP response body.
type SignInResponseBody struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
}

// SessionResponseCollection is the type of the "userquery" service
// "GetAllSessions" endpoint HTTP response body.
type SessionResponseCollection []*SessionResponse

// SessionResponseTinyCollection is the type of the "userquery" service
// "GetAllSessions" endpoint HTTP response body.
type SessionResponseTinyCollection []*SessionResponseTiny

// RegisteredUserResponseCollection is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body.
type RegisteredUserResponseCollection []*RegisteredUserResponse

// RegisteredUserResponseTinyCollection is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body.
type RegisteredUserResponseTinyCollection []*RegisteredUserResponseTiny

// HealthResult is the type of the "userquery" service "health" endpoint HTTP
// response body.
type HealthResult struct {
	// The status of the service
	Status string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// SignInBadArgumentResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "bad_argument" error.
type SignInBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignInNotAuthorizedResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "not_authorized" error.
type SignInNotAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignInInvalidCredentialsResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "invalid_credentials" error.
type SignInInvalidCredentialsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignInPasswordExpiredResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "password_expired" error.
type SignInPasswordExpiredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignInLoginBlockedResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "login_blocked" error.
type SignInLoginBlockedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignInUnexpectedErrorResponseBody is the type of the "userquery" service
// "SignIn" endpoint HTTP response body for the "unexpected_error" error.
type SignInUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutNotFoundResponseBody is the type of the "userquery" service "SignOut"
// endpoint HTTP response body for the "not_found" error.
type SignOutNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutTokenExpiredResponseBody is the type of the "userquery" service
// "SignOut" endpoint HTTP response body for the "token_expired" error.
type SignOutTokenExpiredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutTokenInvalidResponseBody is the type of the "userquery" service
// "SignOut" endpoint HTTP response body for the "token_invalid" error.
type SignOutTokenInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutNotAuthorizedResponseBody is the type of the "userquery" service
// "SignOut" endpoint HTTP response body for the "not_authorized" error.
type SignOutNotAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutBadArgumentResponseBody is the type of the "userquery" service
// "SignOut" endpoint HTTP response body for the "bad_argument" error.
type SignOutBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SignOutUnexpectedErrorResponseBody is the type of the "userquery" service
// "SignOut" endpoint HTTP response body for the "unexpected_error" error.
type SignOutUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllSessionsTokenExpiredResponseBody is the type of the "userquery"
// service "GetAllSessions" endpoint HTTP response body for the "token_expired"
// error.
type GetAllSessionsTokenExpiredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllSessionsTokenInvalidResponseBody is the type of the "userquery"
// service "GetAllSessions" endpoint HTTP response body for the "token_invalid"
// error.
type GetAllSessionsTokenInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllSessionsBadArgumentResponseBody is the type of the "userquery" service
// "GetAllSessions" endpoint HTTP response body for the "bad_argument" error.
type GetAllSessionsBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllSessionsUnexpectedErrorResponseBody is the type of the "userquery"
// service "GetAllSessions" endpoint HTTP response body for the
// "unexpected_error" error.
type GetAllSessionsUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetIDPURLBadArgumentResponseBody is the type of the "userquery" service
// "GetIDPURL" endpoint HTTP response body for the "bad_argument" error.
type GetIDPURLBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetIDPURLUnexpectedErrorResponseBody is the type of the "userquery" service
// "GetIDPURL" endpoint HTTP response body for the "unexpected_error" error.
type GetIDPURLUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SamlSignInNotAuthorizedResponseBody is the type of the "userquery" service
// "SamlSignIn" endpoint HTTP response body for the "not_authorized" error.
type SamlSignInNotAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SamlSignInBadArgumentResponseBody is the type of the "userquery" service
// "SamlSignIn" endpoint HTTP response body for the "bad_argument" error.
type SamlSignInBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SamlSignInUnexpectedErrorResponseBody is the type of the "userquery" service
// "SamlSignIn" endpoint HTTP response body for the "unexpected_error" error.
type SamlSignInUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenNotFoundResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "not_found" error.
type CheckTokenNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenTokenExpiredResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "token_expired" error.
type CheckTokenTokenExpiredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenTokenInvalidResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "token_invalid" error.
type CheckTokenTokenInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenNotAuthorizedResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "not_authorized" error.
type CheckTokenNotAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenBadArgumentResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "bad_argument" error.
type CheckTokenBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CheckTokenUnexpectedErrorResponseBody is the type of the "userquery" service
// "CheckToken" endpoint HTTP response body for the "unexpected_error" error.
type CheckTokenUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDNotFoundResponseBody is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body for the "not_found" error.
type GetUsersByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDTokenExpiredResponseBody is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body for the "token_expired" error.
type GetUsersByIDTokenExpiredResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDTokenInvalidResponseBody is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body for the "token_invalid" error.
type GetUsersByIDTokenInvalidResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDNotAuthorizedResponseBody is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body for the "not_authorized" error.
type GetUsersByIDNotAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDBadArgumentResponseBody is the type of the "userquery" service
// "GetUsersByID" endpoint HTTP response body for the "bad_argument" error.
type GetUsersByIDBadArgumentResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUsersByIDUnexpectedErrorResponseBody is the type of the "userquery"
// service "GetUsersByID" endpoint HTTP response body for the
// "unexpected_error" error.
type GetUsersByIDUnexpectedErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SessionResponse is used to define fields on response body types.
type SessionResponse struct {
	// The UUID of the session.
	ID string `json:"id,omitempty"`
	// The id of entity in the document database.
	Key *string `json:"_key,omitempty"`
	// The id of the associated organization.
	OrganizationID string `json:"organizationId,omitempty"`
	// The id of the associated area.
	AreaID string `json:"areaId,omitempty"`
	// The UUID of the user.
	UserID string `json:"userId,omitempty"`
	// The UUID of the token.
	TokenID string `json:"tokenId,omitempty"`
	// The date/time the record was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date/time the record was updated.
	UpdatedAt *string `updatedAt:"uri,omitempty"`
	// The date/time the session will expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// SessionResponseTiny is used to define fields on response body types.
type SessionResponseTiny struct {
	// The UUID of the session.
	ID string `json:"id,omitempty"`
	// The UUID of the user.
	UserID string `json:"userId,omitempty"`
	// The date/time the record was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date/time the record was updated.
	UpdatedAt *string `updatedAt:"uri,omitempty"`
	// The date/time the session will expire.
	ExpiresAt *string `json:"expiresAt,omitempty"`
}

// RegisteredUserResponse is used to define fields on response body types.
type RegisteredUserResponse struct {
	// The UUID of the underlying or referenced entity.
	ID string `json:"id,omitempty"`
	// The first name of the user.
	FirstName string `json:"firstName,omitempty"`
	// The last name of the user.
	LastName string `json:"lastName,omitempty" storm:"index"`
	// Defines if the entity is active.
	Active bool `json:"active"`
	// The birth name of the user.
	BirthName string `json:"birthName,omitempty"`
	// The address of the user.
	Address *string `json:"address,omitempty"`
	// The id of the city.
	CityID *string `json:"cityId,omitempty"`
	// The ISO 3166-1 code of the country.
	CountryID *string `json:"countryId,omitempty"`
	// The latitude of the user's address.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude of the user's address.
	Longitude *float64 `json:"longitude,omitempty"`
	// The birth date of the user.
	BirthDate *string `json:"birthDate,omitempty"`
	// The gender of the user.
	Gender *string `json:"gender,omitempty"`
	// The ISO code of the user's prefered language.
	LanguageID *string `json:"languageId,omitempty"`
	// The email of the user.
	Email string `json:"email,omitempty"`
	// The login of the user.
	Login string `json:"login,omitempty"`
	// The user mobile phone number.
	Mobile *string `json:"mobile,omitempty"`
	// Defines if this user is a B2C user.
	B2C bool `json:"b2c,omitempty"`
	// The list of the user roles.
	Roles []string `json:"roles,omitempty"`
	// The id of organization where the user was created.
	OrganizationID string `json:"organizationId,omitempty"`
	// The date/time the record was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// The date/time the record was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// RegisteredUserResponseTiny is used to define fields on response body types.
type RegisteredUserResponseTiny struct {
	// The UUID of the underlying or referenced entity.
	ID string `json:"id,omitempty"`
	// The first name of the user.
	FirstName string `json:"firstName,omitempty"`
	// The last name of the user.
	LastName string `json:"lastName,omitempty" storm:"index"`
	// Defines if the entity is active.
	Active bool `json:"active"`
	// The email of the user.
	Email string `json:"email,omitempty"`
	// The login of the user.
	Login string `json:"login,omitempty"`
	// The list of the user roles.
	Roles []string `json:"roles,omitempty"`
	// The id of organization where the user was created.
	OrganizationID string `json:"organizationId,omitempty"`
}

// NewSignInResponseBody builds the HTTP response body from the result of the
// "SignIn" endpoint of the "userquery" service.
func NewSignInResponseBody(res *userquery.JWTToken) *SignInResponseBody {
	body := &SignInResponseBody{
		Token: res.Token,
	}
	return body
}

// NewSessionResponseCollection builds the HTTP response body from the result
// of the "GetAllSessions" endpoint of the "userquery" service.
func NewSessionResponseCollection(res userqueryviews.SessionCollectionView) SessionResponseCollection {
	body := make([]*SessionResponse, len(res))
	for i, val := range res {
		body[i] = &SessionResponse{
			ID:             *val.ID,
			Key:            val.Key,
			OrganizationID: *val.OrganizationID,
			AreaID:         *val.AreaID,
			UserID:         *val.UserID,
			TokenID:        *val.TokenID,
			CreatedAt:      val.CreatedAt,
			UpdatedAt:      val.UpdatedAt,
			ExpiresAt:      val.ExpiresAt,
		}
	}
	return body
}

// NewSessionResponseTinyCollection builds the HTTP response body from the
// result of the "GetAllSessions" endpoint of the "userquery" service.
func NewSessionResponseTinyCollection(res userqueryviews.SessionCollectionView) SessionResponseTinyCollection {
	body := make([]*SessionResponseTiny, len(res))
	for i, val := range res {
		body[i] = &SessionResponseTiny{
			ID:        *val.ID,
			UserID:    *val.UserID,
			CreatedAt: val.CreatedAt,
			UpdatedAt: val.UpdatedAt,
			ExpiresAt: val.ExpiresAt,
		}
	}
	return body
}

// NewRegisteredUserResponseCollection builds the HTTP response body from the
// result of the "GetUsersByID" endpoint of the "userquery" service.
func NewRegisteredUserResponseCollection(res userqueryviews.RegisteredUserCollectionView) RegisteredUserResponseCollection {
	body := make([]*RegisteredUserResponse, len(res))
	for i, val := range res {
		body[i] = &RegisteredUserResponse{
			ID:             *val.ID,
			FirstName:      *val.FirstName,
			LastName:       *val.LastName,
			BirthName:      *val.BirthName,
			Address:        val.Address,
			CityID:         val.CityID,
			CountryID:      val.CountryID,
			Latitude:       val.Latitude,
			Longitude:      val.Longitude,
			BirthDate:      val.BirthDate,
			Gender:         val.Gender,
			LanguageID:     val.LanguageID,
			Email:          *val.Email,
			Login:          *val.Login,
			Mobile:         val.Mobile,
			CreatedAt:      val.CreatedAt,
			UpdatedAt:      val.UpdatedAt,
			OrganizationID: *val.OrganizationID,
		}
		if val.Active != nil {
			body[i].Active = *val.Active
		}
		if val.B2C != nil {
			body[i].B2C = *val.B2C
		}
		if val.Active == nil {
			body[i].Active = true
		}
		if val.B2C == nil {
			body[i].B2C = false
		}
		if val.Roles != nil {
			body[i].Roles = make([]string, len(val.Roles))
			for j, val := range val.Roles {
				body[i].Roles[j] = val
			}
		}
	}
	return body
}

// NewRegisteredUserResponseTinyCollection builds the HTTP response body from
// the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewRegisteredUserResponseTinyCollection(res userqueryviews.RegisteredUserCollectionView) RegisteredUserResponseTinyCollection {
	body := make([]*RegisteredUserResponseTiny, len(res))
	for i, val := range res {
		body[i] = &RegisteredUserResponseTiny{
			ID:             *val.ID,
			FirstName:      *val.FirstName,
			LastName:       *val.LastName,
			Email:          *val.Email,
			Login:          *val.Login,
			OrganizationID: *val.OrganizationID,
		}
		if val.Active != nil {
			body[i].Active = *val.Active
		}
		if val.Active == nil {
			body[i].Active = true
		}
		if val.Roles != nil {
			body[i].Roles = make([]string, len(val.Roles))
			for j, val := range val.Roles {
				body[i].Roles[j] = val
			}
		}
	}
	return body
}

// NewHealthResult builds the HTTP response body from the result of the
// "health" endpoint of the "userquery" service.
func NewHealthResult(res *userquery.HealthResult) *HealthResult {
	body := &HealthResult{
		Status: res.Status,
	}
	return body
}

// NewSignInBadArgumentResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "userquery" service.
func NewSignInBadArgumentResponseBody(res *goa.ServiceError) *SignInBadArgumentResponseBody {
	body := &SignInBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInNotAuthorizedResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "userquery" service.
func NewSignInNotAuthorizedResponseBody(res *goa.ServiceError) *SignInNotAuthorizedResponseBody {
	body := &SignInNotAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInInvalidCredentialsResponseBody builds the HTTP response body from
// the result of the "SignIn" endpoint of the "userquery" service.
func NewSignInInvalidCredentialsResponseBody(res *goa.ServiceError) *SignInInvalidCredentialsResponseBody {
	body := &SignInInvalidCredentialsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInPasswordExpiredResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "userquery" service.
func NewSignInPasswordExpiredResponseBody(res *goa.ServiceError) *SignInPasswordExpiredResponseBody {
	body := &SignInPasswordExpiredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInLoginBlockedResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "userquery" service.
func NewSignInLoginBlockedResponseBody(res *goa.ServiceError) *SignInLoginBlockedResponseBody {
	body := &SignInLoginBlockedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInUnexpectedErrorResponseBody builds the HTTP response body from the
// result of the "SignIn" endpoint of the "userquery" service.
func NewSignInUnexpectedErrorResponseBody(res *goa.ServiceError) *SignInUnexpectedErrorResponseBody {
	body := &SignInUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutNotFoundResponseBody builds the HTTP response body from the result
// of the "SignOut" endpoint of the "userquery" service.
func NewSignOutNotFoundResponseBody(res *goa.ServiceError) *SignOutNotFoundResponseBody {
	body := &SignOutNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutTokenExpiredResponseBody builds the HTTP response body from the
// result of the "SignOut" endpoint of the "userquery" service.
func NewSignOutTokenExpiredResponseBody(res *goa.ServiceError) *SignOutTokenExpiredResponseBody {
	body := &SignOutTokenExpiredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutTokenInvalidResponseBody builds the HTTP response body from the
// result of the "SignOut" endpoint of the "userquery" service.
func NewSignOutTokenInvalidResponseBody(res *goa.ServiceError) *SignOutTokenInvalidResponseBody {
	body := &SignOutTokenInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutNotAuthorizedResponseBody builds the HTTP response body from the
// result of the "SignOut" endpoint of the "userquery" service.
func NewSignOutNotAuthorizedResponseBody(res *goa.ServiceError) *SignOutNotAuthorizedResponseBody {
	body := &SignOutNotAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutBadArgumentResponseBody builds the HTTP response body from the
// result of the "SignOut" endpoint of the "userquery" service.
func NewSignOutBadArgumentResponseBody(res *goa.ServiceError) *SignOutBadArgumentResponseBody {
	body := &SignOutBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignOutUnexpectedErrorResponseBody builds the HTTP response body from the
// result of the "SignOut" endpoint of the "userquery" service.
func NewSignOutUnexpectedErrorResponseBody(res *goa.ServiceError) *SignOutUnexpectedErrorResponseBody {
	body := &SignOutUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllSessionsTokenExpiredResponseBody builds the HTTP response body from
// the result of the "GetAllSessions" endpoint of the "userquery" service.
func NewGetAllSessionsTokenExpiredResponseBody(res *goa.ServiceError) *GetAllSessionsTokenExpiredResponseBody {
	body := &GetAllSessionsTokenExpiredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllSessionsTokenInvalidResponseBody builds the HTTP response body from
// the result of the "GetAllSessions" endpoint of the "userquery" service.
func NewGetAllSessionsTokenInvalidResponseBody(res *goa.ServiceError) *GetAllSessionsTokenInvalidResponseBody {
	body := &GetAllSessionsTokenInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllSessionsBadArgumentResponseBody builds the HTTP response body from
// the result of the "GetAllSessions" endpoint of the "userquery" service.
func NewGetAllSessionsBadArgumentResponseBody(res *goa.ServiceError) *GetAllSessionsBadArgumentResponseBody {
	body := &GetAllSessionsBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllSessionsUnexpectedErrorResponseBody builds the HTTP response body
// from the result of the "GetAllSessions" endpoint of the "userquery" service.
func NewGetAllSessionsUnexpectedErrorResponseBody(res *goa.ServiceError) *GetAllSessionsUnexpectedErrorResponseBody {
	body := &GetAllSessionsUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetIDPURLBadArgumentResponseBody builds the HTTP response body from the
// result of the "GetIDPURL" endpoint of the "userquery" service.
func NewGetIDPURLBadArgumentResponseBody(res *goa.ServiceError) *GetIDPURLBadArgumentResponseBody {
	body := &GetIDPURLBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetIDPURLUnexpectedErrorResponseBody builds the HTTP response body from
// the result of the "GetIDPURL" endpoint of the "userquery" service.
func NewGetIDPURLUnexpectedErrorResponseBody(res *goa.ServiceError) *GetIDPURLUnexpectedErrorResponseBody {
	body := &GetIDPURLUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSamlSignInNotAuthorizedResponseBody builds the HTTP response body from
// the result of the "SamlSignIn" endpoint of the "userquery" service.
func NewSamlSignInNotAuthorizedResponseBody(res *goa.ServiceError) *SamlSignInNotAuthorizedResponseBody {
	body := &SamlSignInNotAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSamlSignInBadArgumentResponseBody builds the HTTP response body from the
// result of the "SamlSignIn" endpoint of the "userquery" service.
func NewSamlSignInBadArgumentResponseBody(res *goa.ServiceError) *SamlSignInBadArgumentResponseBody {
	body := &SamlSignInBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSamlSignInUnexpectedErrorResponseBody builds the HTTP response body from
// the result of the "SamlSignIn" endpoint of the "userquery" service.
func NewSamlSignInUnexpectedErrorResponseBody(res *goa.ServiceError) *SamlSignInUnexpectedErrorResponseBody {
	body := &SamlSignInUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenNotFoundResponseBody builds the HTTP response body from the
// result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenNotFoundResponseBody(res *goa.ServiceError) *CheckTokenNotFoundResponseBody {
	body := &CheckTokenNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenTokenExpiredResponseBody builds the HTTP response body from the
// result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenTokenExpiredResponseBody(res *goa.ServiceError) *CheckTokenTokenExpiredResponseBody {
	body := &CheckTokenTokenExpiredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenTokenInvalidResponseBody builds the HTTP response body from the
// result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenTokenInvalidResponseBody(res *goa.ServiceError) *CheckTokenTokenInvalidResponseBody {
	body := &CheckTokenTokenInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenNotAuthorizedResponseBody builds the HTTP response body from
// the result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenNotAuthorizedResponseBody(res *goa.ServiceError) *CheckTokenNotAuthorizedResponseBody {
	body := &CheckTokenNotAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenBadArgumentResponseBody builds the HTTP response body from the
// result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenBadArgumentResponseBody(res *goa.ServiceError) *CheckTokenBadArgumentResponseBody {
	body := &CheckTokenBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCheckTokenUnexpectedErrorResponseBody builds the HTTP response body from
// the result of the "CheckToken" endpoint of the "userquery" service.
func NewCheckTokenUnexpectedErrorResponseBody(res *goa.ServiceError) *CheckTokenUnexpectedErrorResponseBody {
	body := &CheckTokenUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDNotFoundResponseBody builds the HTTP response body from the
// result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDNotFoundResponseBody(res *goa.ServiceError) *GetUsersByIDNotFoundResponseBody {
	body := &GetUsersByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDTokenExpiredResponseBody builds the HTTP response body from
// the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDTokenExpiredResponseBody(res *goa.ServiceError) *GetUsersByIDTokenExpiredResponseBody {
	body := &GetUsersByIDTokenExpiredResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDTokenInvalidResponseBody builds the HTTP response body from
// the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDTokenInvalidResponseBody(res *goa.ServiceError) *GetUsersByIDTokenInvalidResponseBody {
	body := &GetUsersByIDTokenInvalidResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDNotAuthorizedResponseBody builds the HTTP response body from
// the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDNotAuthorizedResponseBody(res *goa.ServiceError) *GetUsersByIDNotAuthorizedResponseBody {
	body := &GetUsersByIDNotAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDBadArgumentResponseBody builds the HTTP response body from
// the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDBadArgumentResponseBody(res *goa.ServiceError) *GetUsersByIDBadArgumentResponseBody {
	body := &GetUsersByIDBadArgumentResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUsersByIDUnexpectedErrorResponseBody builds the HTTP response body
// from the result of the "GetUsersByID" endpoint of the "userquery" service.
func NewGetUsersByIDUnexpectedErrorResponseBody(res *goa.ServiceError) *GetUsersByIDUnexpectedErrorResponseBody {
	body := &GetUsersByIDUnexpectedErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignInPayload builds a userquery service SignIn endpoint payload.
func NewSignInPayload(key *string, orgID string, areaID string) *userquery.SignInPayload {
	return &userquery.SignInPayload{
		Key:    key,
		OrgID:  orgID,
		AreaID: areaID,
	}
}

// NewSignOutTokenPayload builds a userquery service SignOut endpoint payload.
func NewSignOutTokenPayload(token string, key string, orgID string, areaID string) *userquery.TokenPayload {
	return &userquery.TokenPayload{
		Token:  token,
		Key:    key,
		OrgID:  orgID,
		AreaID: areaID,
	}
}

// NewGetAllSessionsAllSessionsPayload builds a userquery service
// GetAllSessions endpoint payload.
func NewGetAllSessionsAllSessionsPayload(view *string, token string, key string, orgID string, areaID string) *userquery.AllSessionsPayload {
	return &userquery.AllSessionsPayload{
		View:   view,
		Token:  token,
		Key:    key,
		OrgID:  orgID,
		AreaID: areaID,
	}
}

// NewGetIDPURLHostPayload builds a userquery service GetIDPURL endpoint
// payload.
func NewGetIDPURLHostPayload(key string, orgID string, areaID string, host string) *userquery.HostPayload {
	return &userquery.HostPayload{
		Key:    key,
		OrgID:  orgID,
		AreaID: areaID,
		Host:   host,
	}
}

// NewCheckTokenTokenPayload builds a userquery service CheckToken endpoint
// payload.
func NewCheckTokenTokenPayload(token string, key string, orgID string, areaID string) *userquery.TokenPayload {
	return &userquery.TokenPayload{
		Token:  token,
		Key:    key,
		OrgID:  orgID,
		AreaID: areaID,
	}
}

// NewGetUsersByIDManyUserIDPayload builds a userquery service GetUsersByID
// endpoint payload.
func NewGetUsersByIDManyUserIDPayload(body []string, view string, token string, key string, orgID string, areaID string) *userquery.ManyUserIDPayload {
	v := make([]string, len(body))
	for i, val := range body {
		v[i] = val
	}
	res := &userquery.ManyUserIDPayload{
		Ids: v,
	}
	res.View = view
	res.Token = token
	res.Key = key
	res.OrgID = orgID
	res.AreaID = areaID
	return res
}

// ValidateSessionResponse runs the validations defined on SessionResponse
func ValidateSessionResponse(body *SessionResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))

	if body.Key != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.key", *body.Key, goa.FormatUUID))
	}
	if utf8.RuneCountInString(body.OrganizationID) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.organizationId", body.OrganizationID, utf8.RuneCountInString(body.OrganizationID), 255, false))
	}
	if !(body.AreaID == "PROD" || body.AreaID == "DEV" || body.AreaID == "QA" || body.AreaID == "UAT") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.areaId", body.AreaID, []interface{}{"PROD", "DEV", "QA", "UAT"}))
	}
	if utf8.RuneCountInString(body.AreaID) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.areaId", body.AreaID, utf8.RuneCountInString(body.AreaID), 2, true))
	}
	if utf8.RuneCountInString(body.AreaID) > 4 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.areaId", body.AreaID, utf8.RuneCountInString(body.AreaID), 4, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("body.tokenId", body.TokenID, goa.FormatUUID))

	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.ExpiresAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.expiresAt", *body.ExpiresAt, goa.FormatDateTime))
	}
	return
}

// ValidateSessionResponseTiny runs the validations defined on
// SessionResponseTiny
func ValidateSessionResponseTiny(body *SessionResponseTiny) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))

	err = goa.MergeErrors(err, goa.ValidateFormat("body.userId", body.UserID, goa.FormatUUID))

	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.ExpiresAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.expiresAt", *body.ExpiresAt, goa.FormatDateTime))
	}
	return
}

// ValidateRegisteredUserResponse runs the validations defined on
// RegisteredUserResponse
func ValidateRegisteredUserResponse(body *RegisteredUserResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))

	if utf8.RuneCountInString(body.FirstName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstName", body.FirstName, utf8.RuneCountInString(body.FirstName), 255, false))
	}
	if utf8.RuneCountInString(body.LastName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastName", body.LastName, utf8.RuneCountInString(body.LastName), 255, false))
	}
	if utf8.RuneCountInString(body.BirthName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.birthName", body.BirthName, utf8.RuneCountInString(body.BirthName), 255, false))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 1024 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1024, false))
		}
	}
	if body.CountryID != nil {
		if utf8.RuneCountInString(*body.CountryID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.countryId", *body.CountryID, utf8.RuneCountInString(*body.CountryID), 2, true))
		}
	}
	if body.CountryID != nil {
		if utf8.RuneCountInString(*body.CountryID) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.countryId", *body.CountryID, utf8.RuneCountInString(*body.CountryID), 2, false))
		}
	}
	if body.BirthDate != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.birthDate", *body.BirthDate, goa.FormatDate))
	}
	if body.Gender != nil {
		if !(*body.Gender == "M" || *body.Gender == "F") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.gender", *body.Gender, []interface{}{"M", "F"}))
		}
	}
	if body.Gender != nil {
		if utf8.RuneCountInString(*body.Gender) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.gender", *body.Gender, utf8.RuneCountInString(*body.Gender), 1, true))
		}
	}
	if body.Gender != nil {
		if utf8.RuneCountInString(*body.Gender) > 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.gender", *body.Gender, utf8.RuneCountInString(*body.Gender), 1, false))
		}
	}
	if body.LanguageID != nil {
		if utf8.RuneCountInString(*body.LanguageID) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.languageId", *body.LanguageID, utf8.RuneCountInString(*body.LanguageID), 2, true))
		}
	}
	if body.LanguageID != nil {
		if utf8.RuneCountInString(*body.LanguageID) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.languageId", *body.LanguageID, utf8.RuneCountInString(*body.LanguageID), 2, false))
		}
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	if utf8.RuneCountInString(body.Email) > 512 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", body.Email, utf8.RuneCountInString(body.Email), 512, false))
	}
	if utf8.RuneCountInString(body.Login) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.login", body.Login, utf8.RuneCountInString(body.Login), 255, false))
	}
	if body.Mobile != nil {
		if utf8.RuneCountInString(*body.Mobile) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", *body.Mobile, utf8.RuneCountInString(*body.Mobile), 20, false))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updatedAt", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateRegisteredUserResponseTiny runs the validations defined on
// RegisteredUserResponseTiny
func ValidateRegisteredUserResponseTiny(body *RegisteredUserResponseTiny) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.id", body.ID, goa.FormatUUID))

	if utf8.RuneCountInString(body.FirstName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.firstName", body.FirstName, utf8.RuneCountInString(body.FirstName), 255, false))
	}
	if utf8.RuneCountInString(body.LastName) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.lastName", body.LastName, utf8.RuneCountInString(body.LastName), 255, false))
	}
	err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

	if utf8.RuneCountInString(body.Email) > 512 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.email", body.Email, utf8.RuneCountInString(body.Email), 512, false))
	}
	if utf8.RuneCountInString(body.Login) > 255 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.login", body.Login, utf8.RuneCountInString(body.Login), 255, false))
	}
	return
}
