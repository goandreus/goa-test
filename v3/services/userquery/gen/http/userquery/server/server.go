// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery HTTP server
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package server

import (
	"context"
	"net/http"

	promhttp "github.com/prometheus/client_golang/prometheus/promhttp"
	swagger "gitlab.com/wiserskills/v3/services/userquery/gen/swagger"
	userquery "gitlab.com/wiserskills/v3/services/userquery/gen/userquery"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the userquery service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	SignIn         http.Handler
	SignOut        http.Handler
	GetAllSessions http.Handler
	GetIDPURL      http.Handler
	SamlSignIn     http.Handler
	CheckToken     http.Handler
	GetUsersByID   http.Handler
	Health         http.Handler
	Metrics        http.Handler
	Swagger        http.Handler
	SwaggerUI      http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the userquery service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *userquery.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SignIn", "POST", "/signin"},
			{"SignOut", "POST", "/signout"},
			{"GetAllSessions", "GET", "/sessions"},
			{"GetIDPURL", "GET", "/saml"},
			{"SamlSignIn", "POST", "/saml/signin"},
			{"CheckToken", "POST", "/check"},
			{"GetUsersByID", "GET", "/users/id"},
			{"Health", "GET", "/health"},
			{"Metrics", "GET", "/metrics"},
			{"Swagger", "GET", "/swagger"},
			{"SwaggerUI", "GET", "/swaggerui"},
		},
		SignIn:         NewSignInHandler(e.SignIn, mux, decoder, encoder, errhandler, formatter),
		SignOut:        NewSignOutHandler(e.SignOut, mux, decoder, encoder, errhandler, formatter),
		GetAllSessions: NewGetAllSessionsHandler(e.GetAllSessions, mux, decoder, encoder, errhandler, formatter),
		GetIDPURL:      NewGetIDPURLHandler(e.GetIDPURL, mux, decoder, encoder, errhandler, formatter),
		SamlSignIn:     NewSamlSignInHandler(e.SamlSignIn, mux, decoder, encoder, errhandler, formatter),
		CheckToken:     NewCheckTokenHandler(e.CheckToken, mux, decoder, encoder, errhandler, formatter),
		GetUsersByID:   NewGetUsersByIDHandler(e.GetUsersByID, mux, decoder, encoder, errhandler, formatter),
		Health:         NewHealthHandler(e.Health, mux, decoder, encoder, errhandler, formatter),
		Metrics:        promhttp.Handler(),
		Swagger:        swagger.Handler(),
		SwaggerUI:      swagger.UIHandler(mux),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "userquery" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SignIn = m(s.SignIn)
	s.SignOut = m(s.SignOut)
	s.GetAllSessions = m(s.GetAllSessions)
	s.GetIDPURL = m(s.GetIDPURL)
	s.SamlSignIn = m(s.SamlSignIn)
	s.CheckToken = m(s.CheckToken)
	s.GetUsersByID = m(s.GetUsersByID)
	s.Health = m(s.Health)
	s.Metrics = m(s.Metrics)
	s.Swagger = m(s.Swagger)
	s.SwaggerUI = m(s.SwaggerUI)
}

// Mount configures the mux to serve the userquery endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSignInHandler(mux, h.SignIn)
	MountSignOutHandler(mux, h.SignOut)
	MountGetAllSessionsHandler(mux, h.GetAllSessions)
	MountGetIDPURLHandler(mux, h.GetIDPURL)
	MountSamlSignInHandler(mux, h.SamlSignIn)
	MountCheckTokenHandler(mux, h.CheckToken)
	MountGetUsersByIDHandler(mux, h.GetUsersByID)
	MountHealthHandler(mux, h.Health)
	MountMetricsHandler(mux, h.Metrics)
	MountSwaggerHandler(mux, h.Swagger)
	MountSwaggerUIHandler(mux, h.SwaggerUI)
}

// MountSignInHandler configures the mux to serve the "userquery" service
// "SignIn" endpoint.
func MountSignInHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/signin", f)
}

// NewSignInHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "SignIn" endpoint.
func NewSignInHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSignInRequest(mux, decoder)
		encodeResponse = EncodeSignInResponse(encoder)
		encodeError    = EncodeSignInError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SignIn")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountSignOutHandler configures the mux to serve the "userquery" service
// "SignOut" endpoint.
func MountSignOutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/signout", f)
}

// NewSignOutHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "SignOut" endpoint.
func NewSignOutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSignOutRequest(mux, decoder)
		encodeResponse = EncodeSignOutResponse(encoder)
		encodeError    = EncodeSignOutError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SignOut")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountGetAllSessionsHandler configures the mux to serve the "userquery"
// service "GetAllSessions" endpoint.
func MountGetAllSessionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sessions", f)
}

// NewGetAllSessionsHandler creates a HTTP handler which loads the HTTP request
// and calls the "userquery" service "GetAllSessions" endpoint.
func NewGetAllSessionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllSessionsRequest(mux, decoder)
		encodeResponse = EncodeGetAllSessionsResponse(encoder)
		encodeError    = EncodeGetAllSessionsError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAllSessions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountGetIDPURLHandler configures the mux to serve the "userquery" service
// "GetIDPURL" endpoint.
func MountGetIDPURLHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/saml", f)
}

// NewGetIDPURLHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "GetIDPURL" endpoint.
func NewGetIDPURLHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetIDPURLRequest(mux, decoder)
		encodeResponse = EncodeGetIDPURLResponse(encoder)
		encodeError    = EncodeGetIDPURLError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetIDPURL")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountSamlSignInHandler configures the mux to serve the "userquery" service
// "SamlSignIn" endpoint.
func MountSamlSignInHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/saml/signin", f)
}

// NewSamlSignInHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "SamlSignIn" endpoint.
func NewSamlSignInHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSamlSignInRequest(mux, decoder)
		encodeResponse = EncodeSamlSignInResponse(encoder)
		encodeError    = EncodeSamlSignInError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)
		// We force the content type to plain text
		r.Header.Set("Content-Type", "text/plain")

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SamlSignIn")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountCheckTokenHandler configures the mux to serve the "userquery" service
// "CheckToken" endpoint.
func MountCheckTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/check", f)
}

// NewCheckTokenHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "CheckToken" endpoint.
func NewCheckTokenHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCheckTokenRequest(mux, decoder)
		encodeResponse = EncodeCheckTokenResponse(encoder)
		encodeError    = EncodeCheckTokenError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CheckToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountGetUsersByIDHandler configures the mux to serve the "userquery" service
// "GetUsersByID" endpoint.
func MountGetUsersByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users/id", f)
}

// NewGetUsersByIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "userquery" service "GetUsersByID" endpoint.
func NewGetUsersByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetUsersByIDRequest(mux, decoder)
		encodeResponse = EncodeGetUsersByIDResponse(encoder)
		encodeError    = EncodeGetUsersByIDError(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetUsersByID")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountHealthHandler configures the mux to serve the "userquery" service
// "health" endpoint.
func MountHealthHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/health", f)
}

// NewHealthHandler creates a HTTP handler which loads the HTTP request and
// calls the "userquery" service "health" endpoint.
func NewHealthHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeHealthResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)

	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		r.Header.Set("Host", r.Host)

		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "health")
		ctx = context.WithValue(ctx, goa.ServiceKey, "userquery")
		var err error

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
} // MountMetricsHandler configures the mux to serve the "userquery" service
// "metrics" endpoint.
func MountMetricsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/metrics", f)
}

// MountSwaggerHandler configures the mux to serve the "userquery" service
// "swagger" endpoint.
func MountSwaggerHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/swagger", f)
}

// MountSwaggerUIHandler configures the mux to serve the "userquery" service
// "swagger-ui" endpoint.
func MountSwaggerUIHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/swaggerui", f)
	mux.Handle("GET", "/swaggerui/{filename}", f)
}
