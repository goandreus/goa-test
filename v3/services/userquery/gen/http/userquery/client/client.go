// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery client HTTP transport
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the userquery service endpoint HTTP clients.
type Client struct {
	// SignIn Doer is the HTTP client used to make requests to the SignIn endpoint.
	SignInDoer goahttp.Doer

	// SignOut Doer is the HTTP client used to make requests to the SignOut
	// endpoint.
	SignOutDoer goahttp.Doer

	// GetAllSessions Doer is the HTTP client used to make requests to the
	// GetAllSessions endpoint.
	GetAllSessionsDoer goahttp.Doer

	// GetIDPURL Doer is the HTTP client used to make requests to the GetIDPURL
	// endpoint.
	GetIDPURLDoer goahttp.Doer

	// SamlSignIn Doer is the HTTP client used to make requests to the SamlSignIn
	// endpoint.
	SamlSignInDoer goahttp.Doer

	// CheckToken Doer is the HTTP client used to make requests to the CheckToken
	// endpoint.
	CheckTokenDoer goahttp.Doer

	// GetUsersByID Doer is the HTTP client used to make requests to the
	// GetUsersByID endpoint.
	GetUsersByIDDoer goahttp.Doer

	// Health Doer is the HTTP client used to make requests to the health endpoint.
	HealthDoer goahttp.Doer

	// Metrics Doer is the HTTP client used to make requests to the metrics
	// endpoint.
	MetricsDoer goahttp.Doer

	// Swagger Doer is the HTTP client used to make requests to the swagger
	// endpoint.
	SwaggerDoer goahttp.Doer

	// SwaggerUI Doer is the HTTP client used to make requests to the swagger-ui
	// endpoint.
	SwaggerUIDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the userquery service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SignInDoer:          doer,
		SignOutDoer:         doer,
		GetAllSessionsDoer:  doer,
		GetIDPURLDoer:       doer,
		SamlSignInDoer:      doer,
		CheckTokenDoer:      doer,
		GetUsersByIDDoer:    doer,
		HealthDoer:          doer,
		MetricsDoer:         doer,
		SwaggerDoer:         doer,
		SwaggerUIDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// SignIn returns an endpoint that makes HTTP requests to the userquery service
// SignIn server.
func (c *Client) SignIn() goa.Endpoint {
	var (
		encodeRequest  = EncodeSignInRequest(c.encoder)
		decodeResponse = DecodeSignInResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSignInRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SignInDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "SignIn", err)
		}
		return decodeResponse(resp)
	}
}

// SignOut returns an endpoint that makes HTTP requests to the userquery
// service SignOut server.
func (c *Client) SignOut() goa.Endpoint {
	var (
		encodeRequest  = EncodeSignOutRequest(c.encoder)
		decodeResponse = DecodeSignOutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSignOutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SignOutDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "SignOut", err)
		}
		return decodeResponse(resp)
	}
}

// GetAllSessions returns an endpoint that makes HTTP requests to the userquery
// service GetAllSessions server.
func (c *Client) GetAllSessions() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAllSessionsRequest(c.encoder)
		decodeResponse = DecodeGetAllSessionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetAllSessionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllSessionsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "GetAllSessions", err)
		}
		return decodeResponse(resp)
	}
}

// GetIDPURL returns an endpoint that makes HTTP requests to the userquery
// service GetIDPURL server.
func (c *Client) GetIDPURL() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetIDPURLRequest(c.encoder)
		decodeResponse = DecodeGetIDPURLResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetIDPURLRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetIDPURLDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "GetIDPURL", err)
		}
		return decodeResponse(resp)
	}
}

// SamlSignIn returns an endpoint that makes HTTP requests to the userquery
// service SamlSignIn server.
func (c *Client) SamlSignIn() goa.Endpoint {
	var (
		encodeRequest  = EncodeSamlSignInRequest(c.encoder)
		decodeResponse = DecodeSamlSignInResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSamlSignInRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SamlSignInDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "SamlSignIn", err)
		}
		return decodeResponse(resp)
	}
}

// CheckToken returns an endpoint that makes HTTP requests to the userquery
// service CheckToken server.
func (c *Client) CheckToken() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckTokenRequest(c.encoder)
		decodeResponse = DecodeCheckTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCheckTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckTokenDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "CheckToken", err)
		}
		return decodeResponse(resp)
	}
}

// GetUsersByID returns an endpoint that makes HTTP requests to the userquery
// service GetUsersByID server.
func (c *Client) GetUsersByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUsersByIDRequest(c.encoder)
		decodeResponse = DecodeGetUsersByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUsersByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUsersByIDDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "GetUsersByID", err)
		}
		return decodeResponse(resp)
	}
}

// Health returns an endpoint that makes HTTP requests to the userquery service
// health server.
func (c *Client) Health() goa.Endpoint {
	var (
		decodeResponse = DecodeHealthResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildHealthRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HealthDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "health", err)
		}
		return decodeResponse(resp)
	}
}

// Metrics returns an endpoint that makes HTTP requests to the userquery
// service metrics server.
func (c *Client) Metrics() goa.Endpoint {
	var (
		decodeResponse = DecodeMetricsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMetricsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MetricsDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "metrics", err)
		}
		return decodeResponse(resp)
	}
}

// Swagger returns an endpoint that makes HTTP requests to the userquery
// service swagger server.
func (c *Client) Swagger() goa.Endpoint {
	var (
		decodeResponse = DecodeSwaggerResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSwaggerRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SwaggerDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "swagger", err)
		}
		return decodeResponse(resp)
	}
}

// SwaggerUI returns an endpoint that makes HTTP requests to the userquery
// service swagger-ui server.
func (c *Client) SwaggerUI() goa.Endpoint {
	var (
		decodeResponse = DecodeSwaggerUIResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSwaggerUIRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SwaggerUIDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("userquery", "swagger-ui", err)
		}
		return decodeResponse(resp)
	}
}
