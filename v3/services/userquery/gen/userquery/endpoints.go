// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery endpoints
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package userquery

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "userquery" service endpoints.
type Endpoints struct {
	SignIn         goa.Endpoint
	SignOut        goa.Endpoint
	GetAllSessions goa.Endpoint
	GetIDPURL      goa.Endpoint
	SamlSignIn     goa.Endpoint
	CheckToken     goa.Endpoint
	GetUsersByID   goa.Endpoint
	Health         goa.Endpoint
}

// NewEndpoints wraps the methods of the "userquery" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		SignIn:         NewSignInEndpoint(s, a.BasicAuth, a.APIKeyAuth),
		SignOut:        NewSignOutEndpoint(s, a.JWTAuth, a.APIKeyAuth),
		GetAllSessions: NewGetAllSessionsEndpoint(s, a.JWTAuth, a.APIKeyAuth),
		GetIDPURL:      NewGetIDPURLEndpoint(s, a.APIKeyAuth),
		SamlSignIn:     NewSamlSignInEndpoint(s),
		CheckToken:     NewCheckTokenEndpoint(s, a.JWTAuth, a.APIKeyAuth),
		GetUsersByID:   NewGetUsersByIDEndpoint(s, a.JWTAuth, a.APIKeyAuth),
		Health:         NewHealthEndpoint(s),
	}
}

// Use applies the given middleware to all the "userquery" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SignIn = m(e.SignIn)
	e.SignOut = m(e.SignOut)
	e.GetAllSessions = m(e.GetAllSessions)
	e.GetIDPURL = m(e.GetIDPURL)
	e.SamlSignIn = m(e.SamlSignIn)
	e.CheckToken = m(e.CheckToken)
	e.GetUsersByID = m(e.GetUsersByID)
	e.Health = m(e.Health)
}

// NewSignInEndpoint returns an endpoint function that calls the method
// "SignIn" of service "userquery".
func NewSignInEndpoint(s Service, authBasicFn security.AuthBasicFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SignInPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			var key string
			if p.Key != nil {
				key = *p.Key
			}
			ctx, err = authAPIKeyFn(ctx, key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return s.SignIn(ctx, p)
	}
} // NewSignOutEndpoint returns an endpoint function that calls the method
// "SignOut" of service "userquery".
func NewSignOutEndpoint(s Service, authJWTFn security.AuthJWTFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TokenPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:internal", "api:b2c", "api:b2b:[ORGID]"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return nil, s.SignOut(ctx, p)
	}
} // NewGetAllSessionsEndpoint returns an endpoint function that calls the method
// "GetAllSessions" of service "userquery".
func NewGetAllSessionsEndpoint(s Service, authJWTFn security.AuthJWTFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AllSessionsPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:internal", "api:b2c", "api:b2b:[ORGID]"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		}
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetAllSessions(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSessionCollection(res, view)
		return vres, nil
	}
} // NewGetIDPURLEndpoint returns an endpoint function that calls the method
// "GetIDPURL" of service "userquery".
func NewGetIDPURLEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*HostPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "api_key",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		if err != nil {
			return nil, err
		}
		return s.GetIDPURL(ctx, p)
	}
} // NewSamlSignInEndpoint returns an endpoint function that calls the method
// "SamlSignIn" of service "userquery".
func NewSamlSignInEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		return s.SamlSignIn(ctx, p)
	}
} // NewCheckTokenEndpoint returns an endpoint function that calls the method
// "CheckToken" of service "userquery".
func NewCheckTokenEndpoint(s Service, authJWTFn security.AuthJWTFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TokenPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:internal", "api:b2c", "api:b2b:[ORGID]"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		}
		if err != nil {
			return nil, err
		}
		return nil, s.CheckToken(ctx, p)
	}
} // NewGetUsersByIDEndpoint returns an endpoint function that calls the method
// "GetUsersByID" of service "userquery".
func NewGetUsersByIDEndpoint(s Service, authJWTFn security.AuthJWTFunc, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ManyUserIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:internal", "api:b2c", "api:b2b:[ORGID]"},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err == nil {
			sc := security.APIKeyScheme{
				Name:           "api_key",
				Scopes:         []string{},
				RequiredScopes: []string{},
			}
			ctx, err = authAPIKeyFn(ctx, p.Key, &sc)
		}
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetUsersByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedRegisteredUserCollection(res, view)
		return vres, nil
	}
} // NewHealthEndpoint returns an endpoint function that calls the method
// "health" of service "userquery".
func NewHealthEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Health(ctx)
	}
}
