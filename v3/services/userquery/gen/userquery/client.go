// Code generated by goa v3.0.9, DO NOT EDIT.
//
// userquery client
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package userquery

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "userquery" service client.
type Client struct {
	SignInEndpoint         goa.Endpoint
	SignOutEndpoint        goa.Endpoint
	GetAllSessionsEndpoint goa.Endpoint
	GetIDPURLEndpoint      goa.Endpoint
	SamlSignInEndpoint     goa.Endpoint
	CheckTokenEndpoint     goa.Endpoint
	GetUsersByIDEndpoint   goa.Endpoint
	HealthEndpoint         goa.Endpoint
	MetricsEndpoint        goa.Endpoint
	SwaggerEndpoint        goa.Endpoint
	SwaggerUIEndpoint      goa.Endpoint
}

// NewClient initializes a "userquery" service client given the endpoints.
func NewClient(signIn, signOut, getAllSessions, getIDPURL, samlSignIn, checkToken, getUsersByID, health, metrics, swagger, swaggerUI goa.Endpoint) *Client {
	return &Client{
		SignInEndpoint:         signIn,
		SignOutEndpoint:        signOut,
		GetAllSessionsEndpoint: getAllSessions,
		GetIDPURLEndpoint:      getIDPURL,
		SamlSignInEndpoint:     samlSignIn,
		CheckTokenEndpoint:     checkToken,
		GetUsersByIDEndpoint:   getUsersByID,
		HealthEndpoint:         health,
		MetricsEndpoint:        metrics,
		SwaggerEndpoint:        swagger,
		SwaggerUIEndpoint:      swaggerUI,
	}
}

// SignIn calls the "SignIn" endpoint of the "userquery" service.
func (c *Client) SignIn(ctx context.Context, p *SignInPayload) (res *JWTToken, err error) {
	var ires interface{}
	ires, err = c.SignInEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JWTToken), nil
}

// SignOut calls the "SignOut" endpoint of the "userquery" service.
func (c *Client) SignOut(ctx context.Context, p *TokenPayload) (err error) {
	_, err = c.SignOutEndpoint(ctx, p)
	return
}

// GetAllSessions calls the "GetAllSessions" endpoint of the "userquery"
// service.
func (c *Client) GetAllSessions(ctx context.Context, p *AllSessionsPayload) (res SessionCollection, err error) {
	var ires interface{}
	ires, err = c.GetAllSessionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SessionCollection), nil
}

// GetIDPURL calls the "GetIDPURL" endpoint of the "userquery" service.
func (c *Client) GetIDPURL(ctx context.Context, p *HostPayload) (res *RedirectResult, err error) {
	var ires interface{}
	ires, err = c.GetIDPURLEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RedirectResult), nil
}

// SamlSignIn calls the "SamlSignIn" endpoint of the "userquery" service.
func (c *Client) SamlSignIn(ctx context.Context, p string) (res *RedirectResult, err error) {
	var ires interface{}
	ires, err = c.SamlSignInEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RedirectResult), nil
}

// CheckToken calls the "CheckToken" endpoint of the "userquery" service.
func (c *Client) CheckToken(ctx context.Context, p *TokenPayload) (err error) {
	_, err = c.CheckTokenEndpoint(ctx, p)
	return
}

// GetUsersByID calls the "GetUsersByID" endpoint of the "userquery" service.
func (c *Client) GetUsersByID(ctx context.Context, p *ManyUserIDPayload) (res RegisteredUserCollection, err error) {
	var ires interface{}
	ires, err = c.GetUsersByIDEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(RegisteredUserCollection), nil
}

// Health calls the "health" endpoint of the "userquery" service.
func (c *Client) Health(ctx context.Context) (res *HealthResult, err error) {
	var ires interface{}
	ires, err = c.HealthEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*HealthResult), nil
}

// Metrics calls the "metrics" endpoint of the "userquery" service.
func (c *Client) Metrics(ctx context.Context) (res string, err error) {
	var ires interface{}
	ires, err = c.MetricsEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Swagger calls the "swagger" endpoint of the "userquery" service.
func (c *Client) Swagger(ctx context.Context) (res string, err error) {
	var ires interface{}
	ires, err = c.SwaggerEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// SwaggerUI calls the "swagger-ui" endpoint of the "userquery" service.
func (c *Client) SwaggerUI(ctx context.Context) (res string, err error) {
	var ires interface{}
	ires, err = c.SwaggerUIEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(string), nil
}
