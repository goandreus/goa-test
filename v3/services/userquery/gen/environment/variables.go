// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Environment variables
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package environment

import (
	"os"
	"strconv"
)

// GetEnv returns the environment variable for the passed key or the specified default value
func GetEnv(key string, defaultValue string) string {

	if value, ok := os.LookupEnv(key); ok {
		return value
	}

	return defaultValue
}

// GetCluster returns the value of the CLUSTER environment variable
func GetCluster() string {
	v := GetEnv("CLUSTER", "fr0")
	return v
}

// GetNamespace returns the value of the NAMESPACE environment variable
func GetNamespace() string {
	v := GetEnv("NAMESPACE", "services")
	return v
}

// GetBusinessDomain returns the value of the BUSINESS_DOMAIN environment variable
func GetBusinessDomain() string {
	v := GetEnv("BUSINESS_DOMAIN", "User")
	return v
}

// GetServiceType returns the value of the SERVICE_TYPE environment variable
func GetServiceType() string {
	v := GetEnv("SERVICE_TYPE", "query")
	return v
}

// GetServiceName returns the value of the SERVICE_NAME environment variable
func GetServiceName() string {
	v := GetEnv("SERVICE_NAME", "userquery")
	return v
}

// GetNode returns the value of the NODE environment variable
func GetNode() string {
	v := GetEnv("NODE", "")
	return v
}

// GetEventbusCluster returns the value of the EVENTBUS_CLUSTER environment variable
func GetEventbusCluster() string {
	v := GetEnv("EVENTBUS_CLUSTER", "wiserskills")
	return v
}

// GetEventbusUrl returns the value of the EVENTBUS_URL environment variable
func GetEventbusUrl() string {
	v := GetEnv("EVENTBUS_URL", "nats://localhost:4222")
	return v
}

// GetEventbusDefaultTopic returns the value of the EVENTBUS_DEFAULT_TOPIC environment variable
func GetEventbusDefaultTopic() string {
	v := GetEnv("EVENTBUS_DEFAULT_TOPIC", "")
	return v
}

// GetEventbusWriteTimeout returns the value of the EVENTBUS_WRITE_TIMEOUT environment variable
func GetEventbusWriteTimeout() int {
	v := GetEnv("EVENTBUS_WRITE_TIMEOUT", "5000000")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetEventbusRetryCount returns the value of the EVENTBUS_RETRY_COUNT environment variable
func GetEventbusRetryCount() int {
	v := GetEnv("EVENTBUS_RETRY_COUNT", "5")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetEventbusRetryDelay returns the value of the EVENTBUS_RETRY_DELAY environment variable
func GetEventbusRetryDelay() int {
	v := GetEnv("EVENTBUS_RETRY_DELAY", "5")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetEventbusClientCertPath returns the value of the EVENTBUS_CLIENT_CERT_PATH environment variable
func GetEventbusClientCertPath() string {
	v := GetEnv("EVENTBUS_CLIENT_CERT_PATH", "")
	return v
}

// GetEventbusClientKeyPath returns the value of the EVENTBUS_CLIENT_KEY_PATH environment variable
func GetEventbusClientKeyPath() string {
	v := GetEnv("EVENTBUS_CLIENT_KEY_PATH", "")
	return v
}

// GetInternalOrgId returns the value of the INTERNAL_ORG_ID environment variable
func GetInternalOrgId() string {
	v := GetEnv("INTERNAL_ORG_ID", "wiserskills")
	return v
}

// GetApiKey returns the value of the API_KEY environment variable
func GetApiKey() string {
	v := GetEnv("API_KEY", "wsk3z")
	return v
}

// GetTokenKey returns the value of the TOKEN_KEY environment variable
func GetTokenKey() string {
	v := GetEnv("TOKEN_KEY", "sdzT3wxcA")
	return v
}

// GetTokenActive returns the value of the TOKEN_ACTIVE environment variable
func GetTokenActive() bool {
	v := GetEnv("TOKEN_ACTIVE", "false")
	i, err := strconv.ParseBool(v)
	if err != nil {
		return false
	}
	return i
}

// GetTokenLifeTime returns the value of the TOKEN_LIFE_TIME environment variable
func GetTokenLifeTime() int {
	v := GetEnv("TOKEN_LIFE_TIME", "1440")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetSessionLifeTime returns the value of the SESSION_LIFE_TIME environment variable
func GetSessionLifeTime() int {
	v := GetEnv("SESSION_LIFE_TIME", "20")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetLoginMaxAttempt returns the value of the LOGIN_MAX_ATTEMPT environment variable
func GetLoginMaxAttempt() int {
	v := GetEnv("LOGIN_MAX_ATTEMPT", "5")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetLoginSuspensionTime returns the value of the LOGIN_SUSPENSION_TIME environment variable
func GetLoginSuspensionTime() int {
	v := GetEnv("LOGIN_SUSPENSION_TIME", "120")
	i, err := strconv.Atoi(v)
	if err != nil {
		return 0
	}
	return i
}

// GetDbConnection returns the value of the DB_CONNECTION environment variable
func GetDbConnection() string {
	v := GetEnv("DB_CONNECTION", "http://localhost:8529")
	return v
}

// GetDbLogin returns the value of the DB_LOGIN environment variable
func GetDbLogin() string {
	v := GetEnv("DB_LOGIN", "")
	return v
}

// GetDbPassword returns the value of the DB_PASSWORD environment variable
func GetDbPassword() string {
	v := GetEnv("DB_PASSWORD", "")
	return v
}

// GetDbSeedFolder returns the value of the DB_SEED_FOLDER environment variable
func GetDbSeedFolder() string {
	v := GetEnv("DB_SEED_FOLDER", "seed")
	return v
}

// GetDbEncrypt returns the value of the DB_ENCRYPT environment variable
func GetDbEncrypt() bool {
	v := GetEnv("DB_ENCRYPT", "false")
	i, err := strconv.ParseBool(v)
	if err != nil {
		return false
	}
	return i
}
