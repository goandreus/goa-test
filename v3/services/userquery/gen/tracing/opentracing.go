// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Opentracing Middleware
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package tracing

import (
	"context"
	"net/http"

	opentracing "github.com/opentracing/opentracing-go"
	ext "github.com/opentracing/opentracing-go/ext"
	"gitlab.com/wiserskills/v3/services/userquery/gen/constants"
	"goa.design/goa/v3/http/middleware"
)

// OpenTracing returns a middleware that traces HTTP requests using the globally defined
// opentracing tracer
func OpenTracing() func(h http.Handler) http.Handler {
	return func(h http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

			wireCtx, _ := opentracing.GlobalTracer().Extract(
				opentracing.HTTPHeaders,
				opentracing.HTTPHeadersCarrier(r.Header))

			serverSpan := opentracing.StartSpan(r.URL.Path, ext.RPCServerOption(wireCtx))
			defer serverSpan.Finish()

			r = r.WithContext(opentracing.ContextWithSpan(r.Context(), serverSpan))

			if apiKey := r.Header.Get("X-API-KEY"); apiKey != "" {
				r = r.WithContext(context.WithValue(r.Context(), constants.ContextKeyApiKey, apiKey))
			}

			if orgId := r.Header.Get("X-ORG-ID"); orgId != "" {
				r = r.WithContext(context.WithValue(r.Context(), constants.ContextKeyOrgID, orgId))
			}

			if areaId := r.Header.Get("X-AREA-ID"); areaId != "" {
				r = r.WithContext(context.WithValue(r.Context(), constants.ContextKeyAreaID, areaId))
			}

			rw := middleware.CaptureResponse(w)
			h.ServeHTTP(rw, r)
		})
	}
}
