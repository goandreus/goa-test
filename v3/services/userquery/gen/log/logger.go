// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Zap logger implementation
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package log

import (
	"go.uber.org/zap"
)

// LogLevel represents a level of log
type LogLevel int

const (
	ERROR   LogLevel = 0
	WARNING LogLevel = 1
	INFO    LogLevel = 2
	DEBUG   LogLevel = 3
)

// Logger is an adapted zap logger
type Logger struct {
	*zap.SugaredLogger
	config *zap.Config
}

// New creates a new zap logger
func New(serviceName string, production bool) *Logger {

	if production {
		config := zap.NewProductionConfig()
		l, _ := config.Build()
		return &Logger{l.Sugar().With(zap.String("service", serviceName)), &config}
	} else {
		config := zap.NewDevelopmentConfig()
		l, _ := config.Build()
		return &Logger{l.Sugar().With(zap.String("service", serviceName)), &config}
	}
}

// SetLevel sets the current log level
func (logger *Logger) SetLevel(level LogLevel) {
	switch level {
	case DEBUG:
		logger.config.Level.SetLevel(zap.DebugLevel)
	case INFO:
		logger.config.Level.SetLevel(zap.InfoLevel)
	case WARNING:
		logger.config.Level.SetLevel(zap.WarnLevel)
	case ERROR:
		logger.config.Level.SetLevel(zap.ErrorLevel)
	}
}

// Log is called by the log middleware to log HTTP requests key values
func (logger *Logger) Log(keyvals ...interface{}) error {
	logger.Infow("HTTP Request", keyvals...)
	return nil
}
