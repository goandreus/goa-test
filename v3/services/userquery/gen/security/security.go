// Code generated by goa v3.0.9, DO NOT EDIT.
//
// Security functions
//
// Command:
// $ goa gen gitlab.com/wiserskills/v3/services/userquery/design

package security

import (
	"errors"

	jwt "github.com/dgrijalva/jwt-go"
)

// User represents an authenticated user
type User struct {
	ID        string   `json:"id"`
	OrgID     string   `json:"orgId"`
	Login     string   `json:"login"`
	FirstName string   `json:"fistname"`
	LastName  string   `json:"lastname"`
	Email     string   `json:"email"`
	Language  string   `json:"language"`
	Roles     []string `json:"roles"`
}

// WSClaims represents a custom claim used by WS
type WSClaims struct {
	*User
	*jwt.StandardClaims
	Scope string
}

// ParseToken parses the specified string token
func ParseToken(tokenstring string, signingkey []byte) (*WSClaims, error) {

	if tokenstring == "" {
		return nil, errors.New("passed token string is empty")
	}

	if signingkey == nil || len(signingkey) == 0 {
		return nil, errors.New("passed signing key is nil or zero length")
	}

	token, err := jwt.ParseWithClaims(tokenstring, &WSClaims{}, func(token *jwt.Token) (interface{}, error) {
		return signingkey, nil
	})

	return token.Claims.(*WSClaims), err
}
